var searchIndex = JSON.parse('{\
"abi_derive":{"doc":"","i":[[24,"Abi32Elf","abi_derive","",null,null],[24,"Abi64Elf","","",null,null],[24,"EnumFromInteger","","",null,null]],"p":[]},\
"abi_trait":{"doc":"","i":[[0,"elf","abi_trait","",null,null],[8,"ElfBasicType","abi_trait::elf","",null,null],[16,"Xword","","",0,null],[16,"Sxword","","",0,null],[16,"Addr","","",0,null],[16,"Half","","",0,null],[16,"Off","","",0,null],[16,"Sword","","",0,null],[16,"Word","","",0,null]],"p":[[8,"ElfBasicType"]]},\
"elf":{"doc":"","i":[[0,"elf","elf","",null,null],[4,"Shdr","elf::elf","",null,null],[13,"Header32","","",0,null],[13,"Header64","","",0,null],[4,"Ehdr","","",null,null],[13,"Header64","","",1,null],[13,"Header32","","",1,null],[4,"Sym","","",null,null],[13,"Symbol32","","",2,null],[13,"Symbol64","","",2,null],[0,"elf32","elf","",null,null],[3,"Elf","elf::elf32","",null,null],[0,"ehdr","","",null,null],[3,"EIdent","elf::elf32::ehdr","",null,null],[12,"preident","","",3,null],[12,"pad","","",3,null],[12,"nident","","e_ident 的大小",3,null],[6,"Ehdr","","",null,null],[0,"shdr","elf::elf32","",null,null],[6,"Shdr","elf::elf32::shdr","",null,null],[0,"spsec","elf::elf32","",null,null],[6,"SpSecShdr","elf::elf32::spsec","",null,null],[6,"HashShdr","","",null,null],[0,"symtable","elf::elf32","",null,null],[3,"Sym","elf::elf32::symtable","符号表条目",null,null],[12,"name","","用来保存对象文件中符号字符串表中的索引",4,null],[12,"value","","该成员用来保存与符号相关联的值。 既可以是绝对值，也可以是一个地址，具体是哪一个取决于上下文环境。",4,null],[12,"size","","符号相关联的大小。如果是 0，表示没有大小，或者大小未知。",4,null],[12,"info","","用来表示符号类型和绑定的属性，可用值见 `StBind` 和 `StType`",4,null],[12,"other","","当前值为 0，属于保留字段",4,null],[12,"shndx","","每一个符号表条目都和一些 section 相关。 该字段保存相关联的 section 在 section…",4,null],[0,"elf64","elf","",null,null],[3,"Elf","elf::elf64","",null,null],[12,"elf_header","","",5,null],[0,"ehdr","","",null,null],[3,"EIdent","elf::elf64::ehdr","",null,null],[12,"preident","","",6,null],[12,"osabi","","操作系统和 ABI 标识",6,null],[12,"abiversion","","表示 ABI 版本，用于区别版本兼容性。该字段的值依赖于 [`EIdent::osabi`]",6,null],[12,"pad","","",6,null],[12,"nident","","",6,null],[4,"EIOsAbiValue","","该枚举类型只用与 elf64 用于标识字段 [`EIdent::osabi`]",null,null],[13,"OsAbiSysv","","System V ABI",7,null],[13,"OsAbiHpUx","","HP-UX 操作系统",7,null],[13,"OsAbiStandlone","","Standalone (嵌入式) 应用",7,null],[6,"Ehdr","","",null,null],[11,"from_ordinal_unsafe","","",7,[[],["eiosabivalue",4]]],[11,"from_ordinal","","",7,[[],[["option",4],["eiosabivalue",4]]]],[11,"ordinal","","",7,[[]]],[11,"variants","","",7,[[]]],[11,"variant_count","","",7,[[]]],[0,"shdr","elf::elf64","",null,null],[6,"Shdr","elf::elf64::shdr","",null,null],[0,"spsec","elf::elf64","",null,null],[6,"SpSecShdr","elf::elf64::spsec","",null,null],[6,"HashShdr","","",null,null],[0,"symtable","elf::elf64","",null,null],[3,"Sym","elf::elf64::symtable","各字段含义等同于 `Sym32`，唯一不同的是各字段大小和内存布局。",null,null],[12,"name","","",8,null],[12,"info","","",8,null],[12,"other","","",8,null],[12,"shndx","","",8,null],[12,"value","","",8,null],[12,"size","","",8,null],[0,"gabi41","elf","",null,null],[0,"ehdr","elf::gabi41","",null,null],[3,"PreEIdent","elf::gabi41::ehdr","通过预读 PreEIdent 来识别文件类型，以便进一步操作。",null,null],[12,"magic","","值只能为 `{0x7f, \'E\', \'L\', \'F\'}`。用来识别 Elf 对象文件",9,null],[12,"class","","用来识别文件类别，可用值为 [`EIClassValue`]。",9,null],[12,"data","","用来指定特定处理器在对象文件的编码，可用值为 [`EIDataValue`]",9,null],[12,"version","","用来表示 ELF 头部版本号，目前值必须是 [`EIVersionValue::Current`]",9,null],[3,"EhdrGeneral","","",null,null],[12,"e_ident","","",10,null],[12,"e_type","","用于表示对象文件的类型，可用值 [`ETypeValue`]",10,null],[12,"e_machine","","用于表示目标架构，可用值 [`EMachineValue`]",10,null],[12,"e_version","","用于表示对象文件格式的版本，当前值只能为 [`EIVersionValue::Current`]",10,null],[12,"e_entry","","包含程序入口的虚拟地址。如果没有入口点，则值为 0。",10,null],[12,"e_phoff","","包含 program header table 的文件偏移地址，以字节为单位。",10,null],[12,"e_shoff","","包含 section header table 的文件偏移地址，以字节为单位。",10,null],[12,"e_flags","","包含特定处理器的 flag",10,null],[12,"e_ehsize","","包含 ELF header 的大小，以字节为单位。",10,null],[12,"e_phentsize","","包含 program header table 条目的大小，以字节为单位。",10,null],[12,"e_phnum","","包含 program header table 中条目的数量。",10,null],[12,"e_shentsize","","包含 section header table 条目的大小，以字节为单位。",10,null],[12,"e_shnum","","包含 section header table 中条目的数量。",10,null],[12,"e_shstrndx","","包含 section 名称字符串表的 section 在 section header table 中的索引。…",10,null],[4,"Elf64IdentIdx","","",null,null],[13,"MAG0","","",11,null],[13,"MAG1","","",11,null],[13,"MAG2","","",11,null],[13,"MAG3","","",11,null],[13,"CLASS","","",11,null],[13,"DATA","","",11,null],[13,"VERSION","","",11,null],[13,"OSABI","","",11,null],[13,"ABIVERSION","","",11,null],[13,"PAD","","",11,null],[13,"NIDENT","","",11,null],[4,"Elf32IdentIdx","","",null,null],[13,"MAG0","","",12,null],[13,"MAG1","","",12,null],[13,"MAG2","","",12,null],[13,"MAG3","","",12,null],[13,"CLASS","","",12,null],[13,"DATA","","",12,null],[13,"VERSION","","",12,null],[13,"PAD","","",12,null],[13,"NIDENT","","",12,null],[4,"EIClassValue","","用于为 [`PreEIdent::class`] 指定值",null,null],[13,"Class32","","Elf32",13,null],[13,"Class64","","",13,null],[4,"EIDataValue","","用于为 [`PreEIdent::data`] 指定值",null,null],[13,"Lsb","","小端法",14,null],[13,"Msb","","大端法",14,null],[4,"EIVersionValue","","用于为 [`PreEIdent::version`] 指定值",null,null],[13,"Current","","",15,null],[4,"ETypeValue","","",null,null],[13,"NONE","","",16,null],[13,"REL","","可重定位对象文件",16,null],[13,"EXEC","","可执行文件",16,null],[13,"DYN","","共享的对象文件",16,null],[13,"CORE","","核心文件",16,null],[13,"LOOS","","特定环境使用的下限",16,null],[13,"HIOS","","特定环境使用的上限",16,null],[13,"LOPROC","","特定处理器使用的下限",16,null],[13,"HIPROC","","特定处理器使用的上限",16,null],[4,"EMachineValue","","",null,null],[13,"EmNone","","",17,null],[13,"EmM32","","",17,null],[13,"EmSparc","","",17,null],[13,"Em386","","",17,null],[13,"Em68k","","",17,null],[13,"Em88k","","",17,null],[13,"Em860","","",17,null],[13,"EmMips","","",17,null],[13,"EmMipsRs4Be","","",17,null],[17,"EI_NIDENT","","",null,null],[11,"from_ordinal_unsafe","","",13,[[],["eiclassvalue",4]]],[11,"from_ordinal","","",13,[[],[["option",4],["eiclassvalue",4]]]],[11,"ordinal","","",13,[[]]],[11,"variants","","",13,[[]]],[11,"variant_count","","",13,[[]]],[11,"from_ordinal_unsafe","","",14,[[],["eidatavalue",4]]],[11,"from_ordinal","","",14,[[],[["eidatavalue",4],["option",4]]]],[11,"ordinal","","",14,[[]]],[11,"variants","","",14,[[]]],[11,"variant_count","","",14,[[]]],[11,"from_ordinal_unsafe","","",15,[[],["eiversionvalue",4]]],[11,"from_ordinal","","",15,[[],[["eiversionvalue",4],["option",4]]]],[11,"ordinal","","",15,[[]]],[11,"variants","","",15,[[]]],[11,"variant_count","","",15,[[]]],[11,"from_ordinal_unsafe","","",16,[[],["etypevalue",4]]],[11,"from_ordinal","","",16,[[],[["etypevalue",4],["option",4]]]],[11,"ordinal","","",16,[[]]],[11,"variants","","",16,[[]]],[11,"variant_count","","",16,[[]]],[11,"from_ordinal_unsafe","","",17,[[],["emachinevalue",4]]],[11,"from_ordinal","","",17,[[],[["option",4],["emachinevalue",4]]]],[11,"ordinal","","",17,[[]]],[11,"variants","","",17,[[]]],[11,"variant_count","","",17,[[]]],[0,"shdr","elf::gabi41","",null,null],[3,"ShdrGeneral","elf::gabi41::shdr","",null,null],[12,"sh_name","","section 的名字，值为字符串表 section 的索引",18,null],[12,"sh_type","","用于对 section 的内容和语义进行分类，可用值为 [`ShTypeValue`]",18,null],[12,"sh_flags","","section 所支持的各种 bit flag 属性，可用值见 [`ShFlagsValue`]",18,null],[12,"sh_addr","","如果 section 在出现在进程的内存映像中， 该成员会给出该 section 的首地址。 否则，该成员的值为 0。",18,null],[12,"sh_offset","","section 在文件中相对于文件开头的偏移地址。 但如果 section 的类型为…",18,null],[12,"sh_size","","section 在文件中所占用的大小。如果 section 类型为 [`ShTypeValue::NOBITS`]…",18,null],[12,"sh_link","","用于保存 section header table 的索引链接， 具体解释取决于 section 的类型",18,null],[12,"sh_info","","用于保存额外的信息，具体解释取决于 section 类型。",18,null],[12,"sh_addralign","","地址对齐限制",18,null],[12,"sh_entsize","","部分 section 如符号表，具有固定大小的条目，本字段给出这些条目的大小。 如果本字段值为 0，则该…",18,null],[4,"ShTypeValue","","用作 [`ShdrGeneral::sh_type`] 字段的值。",null,null],[13,"NULL","","",19,null],[13,"PROGBITS","","包含程序定义的信息",19,null],[13,"SYMTAB","","包含连接器符号表",19,null],[13,"STRTAB","","包含字符串表",19,null],[13,"RELA","","包含 \\\"Rela\\\" 类型的重定位条目",19,null],[13,"HASH","","包含符号 hash 表",19,null],[13,"DYNAMIC","","包含动态链接表",19,null],[13,"NOTE","","包含 note 信息",19,null],[13,"NOBITS","","包含未初始化的空间，不占用文件空间",19,null],[13,"REL","","包含 \\\"Rel\\\" 类型的重定位条目",19,null],[13,"SHLIB","","保留",19,null],[13,"DYNSYM","","包含动态加载器符号表",19,null],[13,"LOOS","","elf-64 特有（特定环境使用）",19,null],[13,"HIOS","","elf-64 特有（特定环境使用）",19,null],[13,"LOPROC","","用于特定处理器，下限",19,null],[13,"HIPROC","","用于特定处理器，上限",19,null],[13,"LOUSER","","为应用程序保留，下限",19,null],[13,"HIUSER","","为应用程序保留，上限",19,null],[4,"SpSecIndices","","",null,null],[13,"UNDEF","","",20,null],[13,"LOPROC","","",20,null],[13,"HIPROC","","",20,null],[13,"LOOS","","",20,null],[13,"HIOS","","",20,null],[13,"ABS","","",20,null],[13,"COMMON","","",20,null],[4,"ShFlagsValue","","用作 [`ShdrGeneral::sh_flags`] 的可用值。",null,null],[13,"WRITE","","具有 WRITE 属性标签的 section 在进程执行时应当是可写的。   ",21,null],[13,"ALLOC","","在进程执行时，具有该属性的 section 占用内存。 一些控制 section 不占有对象文件的内存映像，…",21,null],[13,"EXECINSTR","","具有该属性标签的 section 包含可执行的机器指令",21,null],[13,"MASKOS","","用于特定环境，Elf64 中使用",21,null],[13,"MASKPROC","","该掩码中的所有 bit 位，都是为特定处理器语义而保留。",21,null],[11,"from_ordinal_unsafe","","",19,[[],["shtypevalue",4]]],[11,"from_ordinal","","",19,[[],[["shtypevalue",4],["option",4]]]],[11,"ordinal","","",19,[[]]],[11,"variants","","",19,[[]]],[11,"variant_count","","",19,[[]]],[11,"from_ordinal_unsafe","","",20,[[],["spsecindices",4]]],[11,"from_ordinal","","",20,[[],[["spsecindices",4],["option",4]]]],[11,"ordinal","","",20,[[]]],[11,"variants","","",20,[[]]],[11,"variant_count","","",20,[[]]],[11,"from_ordinal_unsafe","","",21,[[],["shflagsvalue",4]]],[11,"from_ordinal","","",21,[[],[["option",4],["shflagsvalue",4]]]],[11,"ordinal","","",21,[[]]],[11,"variants","","",21,[[]]],[11,"variant_count","","",21,[[]]],[0,"spsec","elf::gabi41","",null,null],[4,"SpSecShdrGeneral","elf::gabi41::spsec","特殊的 section header",null,null],[13,"bss","","",22,null],[13,"comment","","",22,null],[13,"data","","",22,null],[13,"data1","","",22,null],[13,"debug","","",22,null],[13,"dynaminc","","",22,null],[13,"dynstr","","",22,null],[13,"fini","","",22,null],[13,"got","","",22,null],[13,"hash","","",22,null],[13,"init","","",22,null],[13,"initerp","","",22,null],[13,"line","","",22,null],[13,"note","","",22,null],[13,"plt","","",22,null],[13,"rel","","",22,null],[13,"rela","","",22,null],[13,"rodata","","",22,null],[13,"rodata1","","",22,null],[13,"shstrtab","","",22,null],[13,"strtab","","",22,null],[13,"symtab","","",22,null],[13,"text","","",22,null],[6,"HashShdrGeneral","","",null,null],[11,"new","elf::gabi41::shdr","创建一个新的 HASH section header，只对 sh_type 和 sh_flags 初始化",18,[[]]],[11,"new","elf::gabi41::spsec","创建一个新的 HASH section header，只对 sh_type 和 sh_flags 初始化",23,[[]]],[0,"symtable","elf::gabi41","",null,null],[4,"StBindNormal","elf::gabi41::symtable","",null,null],[13,"LOCAL","","",24,null],[13,"GLOABL","","",24,null],[13,"WEAK","","",24,null],[13,"LOPROC","","",24,null],[13,"HIPROC","","",24,null],[4,"StBind","","",null,null],[13,"Bind","","",25,null],[13,"ProcessorSpecific","","",25,null],[4,"StTypeNormal","","",null,null],[13,"NOTYPE","","",26,null],[13,"OBJECT","","",26,null],[13,"FUNC","","",26,null],[13,"SECTION","","",26,null],[13,"FILE","","",26,null],[13,"LOPROC","","",26,null],[13,"HIPROC","","",26,null],[4,"StType","","",null,null],[13,"Type","","",27,null],[13,"ProcessorSpecific","","",27,null],[11,"from_ordinal_unsafe","","",24,[[],["stbindnormal",4]]],[11,"from_ordinal","","",24,[[],[["option",4],["stbindnormal",4]]]],[11,"ordinal","","",24,[[]]],[11,"variants","","",24,[[]]],[11,"variant_count","","",24,[[]]],[11,"from_ordinal_unsafe","","",26,[[],["sttypenormal",4]]],[11,"from_ordinal","","",26,[[],[["sttypenormal",4],["option",4]]]],[11,"ordinal","","",26,[[]]],[11,"variants","","",26,[[]]],[11,"variant_count","","",26,[[]]],[8,"ElfBasicType","elf::gabi41","",null,null],[16,"Xword","","",28,null],[16,"Sxword","","",28,null],[16,"Addr","","",28,null],[16,"Half","","",28,null],[16,"Off","","",28,null],[16,"Sword","","",28,null],[16,"Word","","",28,null],[11,"from","elf::elf","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","elf::elf32","",29,[[]]],[11,"into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","elf::elf32::ehdr","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","elf::elf32::symtable","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","elf::elf64","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","elf::elf64::ehdr","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","elf::elf64::symtable","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","elf::gabi41::ehdr","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","elf::gabi41::shdr","",18,[[]]],[11,"into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","elf::gabi41::spsec","",22,[[]]],[11,"into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","elf::gabi41::symtable","",24,[[]]],[11,"into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"default","elf::elf","",1,[[]]],[11,"default","elf::elf32::ehdr","",3,[[]]],[11,"default","elf","",30,[[]]],[11,"default","","",31,[[]]],[11,"default","elf::elf64::ehdr","",6,[[]]],[11,"default","elf","",32,[[]]],[11,"default","","",33,[[]]],[11,"default","elf::gabi41::ehdr","",9,[[]]],[11,"fmt","elf::elf64::ehdr","",7,[[["formatter",3]],["result",6]]],[11,"fmt","elf::gabi41::ehdr","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","elf::gabi41::shdr","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","elf::gabi41::symtable","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]]],"p":[[4,"Shdr"],[4,"Ehdr"],[4,"Sym"],[3,"EIdent"],[3,"Sym"],[3,"Elf"],[3,"EIdent"],[4,"EIOsAbiValue"],[3,"Sym"],[3,"PreEIdent"],[3,"EhdrGeneral"],[4,"Elf64IdentIdx"],[4,"Elf32IdentIdx"],[4,"EIClassValue"],[4,"EIDataValue"],[4,"EIVersionValue"],[4,"ETypeValue"],[4,"EMachineValue"],[3,"ShdrGeneral"],[4,"ShTypeValue"],[4,"SpSecIndices"],[4,"ShFlagsValue"],[4,"SpSecShdrGeneral"],[6,"HashShdrGeneral"],[4,"StBindNormal"],[4,"StBind"],[4,"StTypeNormal"],[4,"StType"],[8,"ElfBasicType"],[3,"Elf"],[6,"Ehdr"],[6,"HashShdr"],[6,"Ehdr"],[6,"HashShdr"]]},\
"enum_ordinalize":{"doc":"Enum Ordinalize","i":[[24,"Ordinalize","enum_ordinalize","",null,null]],"p":[]},\
"num_bigint":{"doc":"A Big integer (signed version: `BigInt`, unsigned version:…","i":[[3,"ParseBigIntError","num_bigint","",null,null],[3,"TryFromBigIntError","","The error type returned when a checked conversion…",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`\'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[11,"new","","Creates and initializes a BigInt.",1,[[["vec",3],["sign",4]],["bigint",3]]],[11,"from_biguint","","Creates and initializes a `BigInt`.",1,[[["sign",4],["biguint",3]],["bigint",3]]],[11,"from_slice","","Creates and initializes a `BigInt`.",1,[[["sign",4]],["bigint",3]]],[11,"assign_from_slice","","Reinitializes a `BigInt`.",1,[[["sign",4]]]],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",1,[[["sign",4]],["bigint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",1,[[["sign",4]],["bigint",3]]],[11,"from_signed_bytes_be","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint",3]]],[11,"from_signed_bytes_le","","Creates and initializes a `BigInt` from an array of bytes…",1,[[],["bigint",3]]],[11,"parse_bytes","","Creates and initializes a `BigInt`.",1,[[],[["bigint",3],["option",4]]]],[11,"from_radix_be","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign",4]],[["bigint",3],["option",4]]]],[11,"from_radix_le","","Creates and initializes a `BigInt`. Each u8 of the input…",1,[[["sign",4]],[["bigint",3],["option",4]]]],[11,"to_bytes_be","","Returns the sign and the byte representation of the…",1,[[]]],[11,"to_bytes_le","","Returns the sign and the byte representation of the…",1,[[]]],[11,"to_u32_digits","","Returns the sign and the `u32` digits representation of…",1,[[]]],[11,"to_signed_bytes_be","","Returns the two\'s-complement byte representation of the…",1,[[],["vec",3]]],[11,"to_signed_bytes_le","","Returns the two\'s-complement byte representation of the…",1,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",1,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",1,[[]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",1,[[]]],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",1,[[],["sign",4]]],[11,"magnitude","","Returns the magnitude of the `BigInt` as a `BigUint`.",1,[[],["biguint",3]]],[11,"into_parts","","Convert this `BigInt` into its `Sign` and `BigUint`…",1,[[]]],[11,"bits","","Determines the fewest bits necessary to express the…",1,[[]]],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it\'s not…",1,[[],[["option",4],["biguint",3]]]],[11,"checked_add","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_sub","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_mul","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_div","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"pow","","Returns `self ^ exponent`.",1,[[]]],[11,"modpow","","Returns `(self ^ exponent) mod modulus`",1,[[]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",1,[[]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",1,[[]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are…",1,[[],["option",4]]],[11,"new","","Creates and initializes a `BigUint`.",2,[[["vec",3]],["biguint",3]]],[11,"from_slice","","Creates and initializes a `BigUint`.",2,[[],["biguint",3]]],[11,"assign_from_slice","","Assign a value to a `BigUint`.",2,[[]]],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,[[],["biguint",3]]],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,[[],["biguint",3]]],[11,"parse_bytes","","Creates and initializes a `BigUint`. The input slice must…",2,[[],[["option",4],["biguint",3]]]],[11,"from_radix_be","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[],[["option",4],["biguint",3]]]],[11,"from_radix_le","","Creates and initializes a `BigUint`. Each u8 of the input…",2,[[],[["option",4],["biguint",3]]]],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in…",2,[[],["vec",3]]],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in…",2,[[],["vec",3]]],[11,"to_u32_digits","","Returns the `u32` digits representation of the `BigUint`…",2,[[],["vec",3]]],[11,"to_str_radix","","Returns the integer formatted as a string in the given…",2,[[],["string",3]]],[11,"to_radix_be","","Returns the integer in the requested base in big-endian…",2,[[],["vec",3]]],[11,"to_radix_le","","Returns the integer in the requested base in little-endian…",2,[[],["vec",3]]],[11,"bits","","Determines the fewest bits necessary to express the…",2,[[]]],[11,"pow","","Returns `self ^ exponent`.",2,[[]]],[11,"modpow","","Returns `(self ^ exponent) % modulus`.",2,[[]]],[11,"sqrt","","Returns the truncated principal square root of `self` --…",2,[[]]],[11,"cbrt","","Returns the truncated principal cube root of `self` -- see…",2,[[]]],[11,"nth_root","","Returns the truncated principal `n`th root of `self` --…",2,[[]]],[11,"trailing_zeros","","Returns the number of least-significant bits that are…",2,[[],["option",4]]],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",3,[[],[["option",4],["biguint",3]]]],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`. This…",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",4,[[],[["bigint",3],["option",4]]]],[11,"into_original","","Extract the original value, if available. The value will…",5,[[]]],[11,"from","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"into","","",6,[[]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"from","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"into","","",5,[[]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"from","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"into","","",2,[[]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",2,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",2,[[]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"average_floor","","Returns the floor value of the average of `self` and…",1,[[]]],[11,"average_ceil","","Returns the ceil value of the average of `self` and `other`.",1,[[]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_bigint","","",1,[[],[["bigint",3],["option",4]]]],[11,"to_bigint","","",2,[[],[["bigint",3],["option",4]]]],[11,"to_biguint","","",1,[[],[["option",4],["biguint",3]]]],[11,"to_biguint","","",2,[[],[["option",4],["biguint",3]]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[]]],[11,"from","","",1,[[["biguint",3]]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"from","","",2,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"div","","",1,[[["bigint",3]],["bigint",3]]],[11,"div","","",1,[[["bigint",3]],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",1,[[],["bigint",3]]],[11,"div","","",2,[[["biguint",3]],["biguint",3]]],[11,"div","","",2,[[["biguint",3]],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"div","","",2,[[],["biguint",3]]],[11,"rem","","",1,[[["bigint",3]],["bigint",3]]],[11,"rem","","",1,[[["bigint",3]],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",1,[[],["bigint",3]]],[11,"rem","","",2,[[["biguint",3]],["biguint",3]]],[11,"rem","","",2,[[["biguint",3]],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"rem","","",2,[[],["biguint",3]]],[11,"sub","","",1,[[["bigint",3]],["bigint",3]]],[11,"sub","","",1,[[["bigint",3]],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",1,[[],["bigint",3]]],[11,"sub","","",2,[[["biguint",3]],["biguint",3]]],[11,"sub","","",2,[[["biguint",3]],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"sub","","",2,[[],["biguint",3]]],[11,"eq","","",0,[[["sign",4]]]],[11,"eq","","",1,[[["bigint",3]]]],[11,"eq","","",2,[[["biguint",3]]]],[11,"eq","","",6,[[["parsebiginterror",3]]]],[11,"ne","","",6,[[["parsebiginterror",3]]]],[11,"eq","","",5,[[["tryfrombiginterror",3]]]],[11,"ne","","",5,[[["tryfrombiginterror",3]]]],[11,"cmp","","",0,[[["sign",4]],["ordering",4]]],[11,"cmp","","",1,[[["bigint",3]],["ordering",4]]],[11,"cmp","","",2,[[["biguint",3]],["ordering",4]]],[11,"partial_cmp","","",0,[[["sign",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",1,[[["bigint",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",2,[[["biguint",3]],[["option",4],["ordering",4]]]],[11,"add","","",1,[[["bigint",3]],["bigint",3]]],[11,"add","","",1,[[["bigint",3]],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",1,[[],["bigint",3]]],[11,"add","","",2,[[["biguint",3]],["biguint",3]]],[11,"add","","",2,[[["biguint",3]],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"add","","",2,[[],["biguint",3]]],[11,"mul","","",0,[[["sign",4]],["sign",4]]],[11,"mul","","",1,[[["bigint",3]],["bigint",3]]],[11,"mul","","",1,[[["bigint",3]],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",1,[[],["bigint",3]]],[11,"mul","","",2,[[["biguint",3]],["biguint",3]]],[11,"mul","","",2,[[["biguint",3]],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"mul","","",2,[[],["biguint",3]]],[11,"neg","","Negate Sign value.",0,[[],["sign",4]]],[11,"neg","","",1,[[],["bigint",3]]],[11,"add_assign","","",1,[[["bigint",3]]]],[11,"add_assign","","",1,[[["bigint",3]]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",1,[[]]],[11,"add_assign","","",2,[[["biguint",3]]]],[11,"add_assign","","",2,[[["biguint",3]]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"add_assign","","",2,[[]]],[11,"sub_assign","","",1,[[["bigint",3]]]],[11,"sub_assign","","",1,[[["bigint",3]]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",1,[[]]],[11,"sub_assign","","",2,[[["biguint",3]]]],[11,"sub_assign","","",2,[[["biguint",3]]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"sub_assign","","",2,[[]]],[11,"mul_assign","","",1,[[["bigint",3]]]],[11,"mul_assign","","",1,[[["bigint",3]]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",1,[[]]],[11,"mul_assign","","",2,[[["biguint",3]]]],[11,"mul_assign","","",2,[[["biguint",3]]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"mul_assign","","",2,[[]]],[11,"div_assign","","",1,[[["bigint",3]]]],[11,"div_assign","","",1,[[["bigint",3]]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",1,[[]]],[11,"div_assign","","",2,[[["biguint",3]]]],[11,"div_assign","","",2,[[["biguint",3]]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"div_assign","","",2,[[]]],[11,"rem_assign","","",1,[[["bigint",3]]]],[11,"rem_assign","","",1,[[["bigint",3]]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",1,[[]]],[11,"rem_assign","","",2,[[["biguint",3]]]],[11,"rem_assign","","",2,[[["biguint",3]]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"rem_assign","","",2,[[]]],[11,"not","","",1,[[],["bigint",3]]],[11,"bitand","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitand","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitand","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitor","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitor","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",1,[[["bigint",3]],["bigint",3]]],[11,"bitxor","","",2,[[["biguint",3]],["biguint",3]]],[11,"bitxor","","",2,[[["biguint",3]],["biguint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",1,[[],["bigint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shl","","",2,[[],["biguint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",1,[[],["bigint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"shr","","",2,[[],["biguint",3]]],[11,"bitand_assign","","",1,[[["bigint",3]]]],[11,"bitand_assign","","",1,[[["bigint",3]]]],[11,"bitand_assign","","",2,[[["biguint",3]]]],[11,"bitand_assign","","",2,[[["biguint",3]]]],[11,"bitor_assign","","",1,[[["bigint",3]]]],[11,"bitor_assign","","",1,[[["bigint",3]]]],[11,"bitor_assign","","",2,[[["biguint",3]]]],[11,"bitor_assign","","",2,[[["biguint",3]]]],[11,"bitxor_assign","","",1,[[["bigint",3]]]],[11,"bitxor_assign","","",1,[[["bigint",3]]]],[11,"bitxor_assign","","",2,[[["biguint",3]]]],[11,"bitxor_assign","","",2,[[["biguint",3]]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",1,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shl_assign","","",2,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",1,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"shr_assign","","",2,[[]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"product","","",1,[[]]],[11,"product","","",2,[[]]],[11,"sum","","",1,[[]]],[11,"sum","","",2,[[]]],[11,"try_from","","",2,[[["bigint",3]],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[["bigint",3]],[["tryfrombiginterror",3],["result",4],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"try_from","","",2,[[],[["result",4],["tryfrombiginterror",3],["biguint",3]]]],[11,"from_str","","",1,[[],[["result",4],["bigint",3],["parsebiginterror",3]]]],[11,"from_str","","",2,[[],[["result",4],["biguint",3],["parsebiginterror",3]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"clone","","",0,[[],["sign",4]]],[11,"clone","","",1,[[]]],[11,"clone_from","","",1,[[]]],[11,"clone","","",2,[[]]],[11,"clone_from","","",2,[[]]],[11,"clone","","",6,[[],["parsebiginterror",3]]],[11,"clone","","",5,[[],["tryfrombiginterror",3]]],[11,"default","","",1,[[],["bigint",3]]],[11,"default","","",2,[[],["biguint",3]]],[11,"description","","",6,[[]]],[11,"description","","",5,[[]]],[11,"nth_root","","",1,[[]]],[11,"sqrt","","",1,[[]]],[11,"cbrt","","",1,[[]]],[11,"nth_root","","",2,[[]]],[11,"sqrt","","",2,[[]]],[11,"cbrt","","",2,[[]]],[11,"div_rem","","",1,[[["bigint",3]]]],[11,"div_floor","","",1,[[["bigint",3]],["bigint",3]]],[11,"mod_floor","","",1,[[["bigint",3]],["bigint",3]]],[11,"div_mod_floor","","",1,[[["bigint",3]]]],[11,"div_ceil","","",1,[[]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",1,[[["bigint",3]],["bigint",3]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",1,[[["bigint",3]],["bigint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",1,[[["bigint",3]]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",1,[[["bigint",3]]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["bigint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",1,[[["bigint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",1,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",1,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",1,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",1,[[]]],[11,"div_rem","","",2,[[["biguint",3]]]],[11,"div_floor","","",2,[[["biguint",3]],["biguint",3]]],[11,"mod_floor","","",2,[[["biguint",3]],["biguint",3]]],[11,"div_mod_floor","","",2,[[["biguint",3]]]],[11,"div_ceil","","",2,[[["biguint",3]],["biguint",3]]],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",2,[[]]],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",2,[[["biguint",3]],["biguint",3]]],[11,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",2,[[]]],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,[[["biguint",3]]]],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,[[["biguint",3]]]],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,[[]]],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",2,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",2,[[]]],[11,"to_i64","","",1,[[],["option",4]]],[11,"to_i128","","",1,[[],["option",4]]],[11,"to_u64","","",1,[[],["option",4]]],[11,"to_u128","","",1,[[],["option",4]]],[11,"to_f32","","",1,[[],["option",4]]],[11,"to_f64","","",1,[[],["option",4]]],[11,"to_i64","","",2,[[],["option",4]]],[11,"to_i128","","",2,[[],["option",4]]],[11,"to_u64","","",2,[[],["option",4]]],[11,"to_u128","","",2,[[],["option",4]]],[11,"to_f32","","",2,[[],["option",4]]],[11,"to_f64","","",2,[[],["option",4]]],[11,"from_i64","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_i128","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_u64","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_u128","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_f64","","",1,[[],[["bigint",3],["option",4]]]],[11,"from_i64","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_i128","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_u64","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_u128","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_f64","","",2,[[],[["option",4],["biguint",3]]]],[11,"from_str_radix","","Creates and initializes a BigInt.",1,[[],[["result",4],["bigint",3],["parsebiginterror",3]]]],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,[[],[["result",4],["biguint",3],["parsebiginterror",3]]]],[11,"zero","","",1,[[],["bigint",3]]],[11,"set_zero","","",1,[[]]],[11,"is_zero","","",1,[[]]],[11,"zero","","",2,[[],["biguint",3]]],[11,"set_zero","","",2,[[]]],[11,"is_zero","","",2,[[]]],[11,"one","","",1,[[],["bigint",3]]],[11,"set_one","","",1,[[]]],[11,"is_one","","",1,[[]]],[11,"one","","",2,[[],["biguint",3]]],[11,"set_one","","",2,[[]]],[11,"is_one","","",2,[[]]],[11,"checked_add","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_add","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_sub","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_sub","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_mul","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_mul","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"checked_div","","",1,[[["bigint",3]],[["bigint",3],["option",4]]]],[11,"checked_div","","",2,[[["biguint",3]],[["option",4],["biguint",3]]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[],["bigint",3]]],[11,"pow","","",1,[[["biguint",3]],["bigint",3]]],[11,"pow","","",1,[[["biguint",3]],["bigint",3]]],[11,"pow","","",2,[[["biguint",3]],["biguint",3]]],[11,"pow","","",2,[[["biguint",3]],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"pow","","",2,[[],["biguint",3]]],[11,"abs","","",1,[[],["bigint",3]]],[11,"abs_sub","","",1,[[["bigint",3]],["bigint",3]]],[11,"signum","","",1,[[],["bigint",3]]],[11,"is_positive","","",1,[[]]],[11,"is_negative","","",1,[[]]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[8,"ToBigUint"],[8,"ToBigInt"],[3,"TryFromBigIntError"],[3,"ParseBigIntError"]]},\
"num_integer":{"doc":"Integer trait and functions.","i":[[3,"ExtendedGcd","num_integer","Greatest common divisor and Bézout coefficients",null,null],[12,"gcd","","",0,null],[12,"x","","",0,null],[12,"y","","",0,null],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots",8]],["roots",8]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[["roots",8]],["roots",8]]],[5,"average_ceil","","Returns the ceiling value of the average of `x` and `y` --…",null,[[["average",8]],["average",8]]],[5,"average_floor","","Returns the floor value of the average of `x` and `y` --…",null,[[["average",8]],["average",8]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer",8]]]],[5,"div_floor","","Floored integer division",null,[[["integer",8]],["integer",8]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer",8]],["integer",8]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer",8]]]],[5,"div_ceil","","Ceiled integer division",null,[[["integer",8]],["integer",8]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[["integer",8]],["integer",8]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[["integer",8]],["integer",8]]],[5,"gcd_lcm","","Calculates the Greatest Common Divisor (GCD) and Lowest…",null,[[["integer",8]]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["integer",8],["clone",8]],[["integer",8],["clone",8]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["integer",8],["clone",8]]]],[8,"Roots","","Provides methods to compute an integer\'s square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",1,[[]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[]]],[8,"Average","","Provides methods to compute the average of two integers,…",null,null],[10,"average_ceil","","Returns the ceiling value of the average of `self` and…",2,[[]]],[10,"average_floor","","Returns the floor value of the average of `self` and…",2,[[]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",3,[[]]],[10,"mod_floor","","Floored integer modulo, satisfying:",3,[[]]],[11,"div_ceil","","Ceiled integer division.",3,[[]]],[10,"gcd","","Greatest Common Divisor (GCD).",3,[[]]],[10,"lcm","","Lowest Common Multiple (LCM).",3,[[]]],[11,"gcd_lcm","","Greatest Common Divisor (GCD) and Lowest Common Multiple…",3,[[]]],[11,"extended_gcd","","Greatest common divisor and Bézout coefficients.",3,[[],["extendedgcd",3]]],[11,"extended_gcd_lcm","","Greatest common divisor, least common multiple, and Bézout…",3,[[]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",3,[[]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",3,[[]]],[10,"is_even","","Returns `true` if the number is even.",3,[[]]],[10,"is_odd","","Returns `true` if the number is odd.",3,[[]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",3,[[]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",3,[[]]],[11,"next_multiple_of","","Rounds up to nearest multiple of argument.",3,[[]]],[11,"prev_multiple_of","","Rounds down to nearest multiple of argument.",3,[[]]],[11,"new","","For a given n, iterate over all binomial coefficients…",4,[[],["iterbinomial",3]]],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"from","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"into","","",4,[[]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"eq","","",0,[[["extendedgcd",3]]]],[11,"ne","","",0,[[["extendedgcd",3]]]],[11,"next","","",4,[[],["option",4]]],[11,"clone","","",0,[[],["extendedgcd",3]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",1,[[]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",1,[[]]]],"p":[[3,"ExtendedGcd"],[8,"Roots"],[8,"Average"],[8,"Integer"],[3,"IterBinomial"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","i":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_min","","A value bounded by a minimum value",null,[[["partialord",8]],["partialord",8]]],[5,"clamp_max","","A value bounded by a maximum value",null,[[["partialord",8]],["partialord",8]]],[0,"bounds","","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",2,[[]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[]]],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,[[["numcast",8]],[["numcast",8],["option",4]]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`. If the value…",3,[[],["option",4]]],[11,"to_i8","","Converts the value of `self` to an `i8`. If the value…",3,[[],["option",4]]],[11,"to_i16","","Converts the value of `self` to an `i16`. If the value…",3,[[],["option",4]]],[11,"to_i32","","Converts the value of `self` to an `i32`. If the value…",3,[[],["option",4]]],[10,"to_i64","","Converts the value of `self` to an `i64`. If the value…",3,[[],["option",4]]],[11,"to_i128","","Converts the value of `self` to an `i128`. If the value…",3,[[],["option",4]]],[11,"to_usize","","Converts the value of `self` to a `usize`. If the value…",3,[[],["option",4]]],[11,"to_u8","","Converts the value of `self` to a `u8`. If the value…",3,[[],["option",4]]],[11,"to_u16","","Converts the value of `self` to a `u16`. If the value…",3,[[],["option",4]]],[11,"to_u32","","Converts the value of `self` to a `u32`. If the value…",3,[[],["option",4]]],[10,"to_u64","","Converts the value of `self` to a `u64`. If the value…",3,[[],["option",4]]],[11,"to_u128","","Converts the value of `self` to a `u128`. If the value…",3,[[],["option",4]]],[11,"to_f32","","Converts the value of `self` to an `f32`. If the value…",3,[[],["option",4]]],[11,"to_f64","","Converts the value of `self` to an `f64`. If the value…",3,[[],["option",4]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Converts an `isize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i8","","Converts an `i8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_i16","","Converts an `i16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i32","","Converts an `i32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_i64","","Converts an `i64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_i128","","Converts an `i128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_usize","","Converts a `usize` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u8","","Converts an `u8` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_u16","","Converts an `u16` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u32","","Converts an `u32` to return an optional value of this…",4,[[],["option",4]]],[10,"from_u64","","Converts an `u64` to return an optional value of this…",4,[[],["option",4]]],[11,"from_u128","","Converts an `u128` to return an optional value of this…",4,[[],["option",4]]],[11,"from_f32","","Converts a `f32` to return an optional value of this type.…",4,[[],["option",4]]],[11,"from_f64","","Converts a `f64` to return an optional value of this type.…",4,[[],["option",4]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[["toprimitive",8]],["option",4]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",7,[[]]],[10,"neg_infinity","","Returns negative infinity.",7,[[]]],[10,"nan","","Returns NaN.",7,[[]]],[10,"neg_zero","","Returns `-0.0`.",7,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[],["fpcategory",4]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[]]],[11,"trunc","","Return the integer part of a number.",7,[[]]],[11,"fract","","Returns the fractional part of a number.",7,[[]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[]]],[11,"min","","Returns the minimum of the two numbers.",7,[[]]],[11,"max","","Returns the maximum of the two numbers.",7,[[]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[]]],[11,"powi","","Raise a number to an integer power.",7,[[]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,[[]]],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",8,[[]]],[10,"infinity","","Returns the infinite value.",8,[[]]],[10,"neg_infinity","","Returns the negative infinite value.",8,[[]]],[10,"neg_zero","","Returns `-0.0`.",8,[[]]],[10,"min_value","","Returns the smallest finite value that this type can…",8,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",8,[[]]],[11,"epsilon","","Returns epsilon, a small positive value.",8,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",8,[[]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",8,[[]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or…",8,[[]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",8,[[]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,…",8,[[]]],[10,"classify","","Returns the floating point category of the number. If only…",8,[[],["fpcategory",4]]],[10,"floor","","Returns the largest integer less than or equal to a number.",8,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",8,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",8,[[]]],[10,"trunc","","Return the integer part of a number.",8,[[]]],[10,"fract","","Returns the fractional part of a number.",8,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",8,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",8,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",8,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",8,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",8,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",8,[[]]],[10,"powi","","Raise a number to an integer power.",8,[[]]],[10,"powf","","Raise a number to a floating point power.",8,[[]]],[10,"sqrt","","Take the square root of a number.",8,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",8,[[]]],[10,"exp2","","Returns `2^(self)`.",8,[[]]],[10,"ln","","Returns the natural logarithm of the number.",8,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",8,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",8,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",8,[[]]],[11,"to_degrees","","Converts radians to degrees.",8,[[]]],[11,"to_radians","","Converts degrees to radians.",8,[[]]],[10,"max","","Returns the maximum of the two numbers.",8,[[]]],[10,"min","","Returns the minimum of the two numbers.",8,[[]]],[10,"abs_sub","","The positive difference of two numbers.",8,[[]]],[10,"cbrt","","Take the cubic root of a number.",8,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",8,[[]]],[10,"sin","","Computes the sine of a number (in radians).",8,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",8,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",8,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",8,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",8,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",8,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",8,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",8,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",8,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",8,[[]]],[10,"sinh","","Hyperbolic sine function.",8,[[]]],[10,"cosh","","Hyperbolic cosine function.",8,[[]]],[10,"tanh","","Hyperbolic tangent function.",8,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",8,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",8,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",8,[[]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",8,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",9,[[]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",9,[[]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",9,[[]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",9,[[]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",9,[[]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",9,[[]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",9,[[]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",9,[[]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",9,[[]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",9,[[]]],[10,"LN_10","","Return `ln(10.0)`.",9,[[]]],[10,"LN_2","","Return `ln(2.0)`.",9,[[]]],[10,"LOG10_E","","Return `log10(e)`.",9,[[]]],[10,"LOG2_E","","Return `log2(e)`.",9,[[]]],[10,"PI","","Return Archimedes’ constant `π`.",9,[[]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",9,[[]]],[11,"TAU","","Return the full circle constant `τ`.",9,[[]]],[11,"LOG10_2","","Return `log10(2.0)`.",9,[[]]],[11,"LOG2_10","","Return `log2(10.0)`.",9,[[]]],[0,"identities","num_traits","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,[[],["zero",8]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["one",8]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`. #…",10,[[]]],[11,"set_zero","","Sets `self` to the additive identity element of `Self`, `0`.",10,[[]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",10,[[]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",11,[[]]],[11,"set_one","","Sets `self` to the multiplicative identity element of…",11,[[]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",11,[[]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","Generic trait for primitive integers.",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount, `n`,…",12,[[]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount, `n`,…",12,[[]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[]]],[10,"from_be","","Convert an integer from big endian to the target\'s…",12,[[]]],[10,"from_le","","Convert an integer from little endian to the target\'s…",12,[[]]],[10,"to_be","","Convert `self` to big endian from the target\'s endianness.",12,[[]]],[10,"to_le","","Convert `self` to little endian from the target\'s…",12,[[]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",13,[[],["option",4]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",14,[[],["option",4]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",15,[[],["option",4]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",16,[[],["option",4]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",17,[[],["option",4]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can\'t…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can\'t…",18,[[],["option",4]]],[8,"CheckedShl","","Performs a left shift that returns `None` on shifts larger…",null,null],[10,"checked_shl","","Checked shift left. Computes `self << rhs`, returning…",19,[[],["option",4]]],[8,"CheckedShr","","Performs a right shift that returns `None` on shifts…",null,null],[10,"checked_shr","","Checked shift right. Computes `self >> rhs`, returning…",20,[[],["option",4]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",21,null],[10,"inv","","Returns the multiplicative inverse of `self`.",21,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",22,null],[10,"mul_add","","Performs the fused multiply-add operation.",22,[[]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",23,[[]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations. Deprecated, use…",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",24,[[]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",24,[[]]],[8,"SaturatingAdd","","Performs addition that saturates at the numeric bounds…",null,null],[10,"saturating_add","","Saturating addition. Computes `self + other`, saturating…",25,[[]]],[8,"SaturatingSub","","Performs subtraction that saturates at the numeric bounds…",null,null],[10,"saturating_sub","","Saturating subtraction. Computes `self - other`,…",26,[[]]],[8,"SaturatingMul","","Performs multiplication that saturates at the numeric…",null,null],[10,"saturating_mul","","Saturating multiplication. Computes `self * other`,…",27,[[]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",28,[[]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",29,[[]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",30,[[]]],[8,"WrappingNeg","","Performs a negation that does not panic.",null,null],[10,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping…",31,[[]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",32,[[]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",33,[[]]],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",null,[[["mul",8],["one",8],["clone",8]],[["one",8],["clone",8],["mul",8]]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["one",8],["checkedmul",8],["clone",8]],[["checkedmul",8],["one",8],["clone",8],["option",4]]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",34,null],[10,"pow","","Returns `self` to the power `rhs`.",34,[[]]],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have…",null,null],[10,"min_value","","Returns the smallest finite value that this type can…",35,[[]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",35,[[]]],[10,"epsilon","","Returns epsilon, a small positive value.",35,[[]]],[10,"max_value","","Returns the largest finite value that this type can…",35,[[]]],[10,"floor","","Returns the largest integer less than or equal to a number.",35,[[]]],[10,"ceil","","Returns the smallest integer greater than or equal to a…",35,[[]]],[10,"round","","Returns the nearest integer to a number. Round half-way…",35,[[]]],[10,"trunc","","Return the integer part of a number.",35,[[]]],[10,"fract","","Returns the fractional part of a number.",35,[[]]],[10,"abs","","Computes the absolute value of `self`. Returns…",35,[[]]],[10,"signum","","Returns a number that represents the sign of `self`.",35,[[]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`,…",35,[[]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`,…",35,[[]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only…",35,[[]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",35,[[]]],[10,"powi","","Raise a number to an integer power.",35,[[]]],[10,"powf","","Raise a number to a real number power.",35,[[]]],[10,"sqrt","","Take the square root of a number.",35,[[]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",35,[[]]],[10,"exp2","","Returns `2^(self)`.",35,[[]]],[10,"ln","","Returns the natural logarithm of the number.",35,[[]]],[10,"log","","Returns the logarithm of the number with respect to an…",35,[[]]],[10,"log2","","Returns the base 2 logarithm of the number.",35,[[]]],[10,"log10","","Returns the base 10 logarithm of the number.",35,[[]]],[10,"to_degrees","","Converts radians to degrees.",35,[[]]],[10,"to_radians","","Converts degrees to radians.",35,[[]]],[10,"max","","Returns the maximum of the two numbers.",35,[[]]],[10,"min","","Returns the minimum of the two numbers.",35,[[]]],[10,"abs_sub","","The positive difference of two numbers.",35,[[]]],[10,"cbrt","","Take the cubic root of a number.",35,[[]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle…",35,[[]]],[10,"sin","","Computes the sine of a number (in radians).",35,[[]]],[10,"cos","","Computes the cosine of a number (in radians).",35,[[]]],[10,"tan","","Computes the tangent of a number (in radians).",35,[[]]],[10,"asin","","Computes the arcsine of a number. Return value is in…",35,[[]]],[10,"acos","","Computes the arccosine of a number. Return value is in…",35,[[]]],[10,"atan","","Computes the arctangent of a number. Return value is in…",35,[[]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and…",35,[[]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number,…",35,[[]]],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if…",35,[[]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than…",35,[[]]],[10,"sinh","","Hyperbolic sine function.",35,[[]]],[10,"cosh","","Hyperbolic cosine function.",35,[[]]],[10,"tanh","","Hyperbolic tangent function.",35,[[]]],[10,"asinh","","Inverse hyperbolic sine function.",35,[[]]],[10,"acosh","","Inverse hyperbolic cosine function.",35,[[]]],[10,"atanh","","Inverse hyperbolic tangent function.",35,[[]]],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,[[["signed",8]],["signed",8]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed",8]],["signed",8]]],[5,"signum","","Returns the sign of the number.",null,[[["signed",8]],["signed",8]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",36,[[]]],[10,"abs_sub","","The positive difference of two numbers.",36,[[]]],[10,"signum","","Returns the sign of the number.",36,[[]]],[10,"is_positive","","Returns true if the number is positive and false if the…",36,[[]]],[10,"is_negative","","Returns true if the number is negative and false if the…",36,[[]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",37,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",37,[[],["result",4]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[11,"from","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"into","","",0,[[]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"to_string","","",0,[[],["string",3]]],[11,"from","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"into","","",1,[[]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the…","i":[[3,"TokenStream","proc_macro2","An abstract stream of tokens, or more concretely a…",null,null],[3,"LexError","","Error returned from `TokenStream::from_str`.",null,null],[3,"Span","","A region of source code, along with macro expansion…",null,null],[3,"Group","","A delimited token stream.",null,null],[3,"Punct","","An `Punct` is an single punctuation character like `+`,…",null,null],[3,"Ident","","A word of Rust code, which may be a keyword or legal…",null,null],[3,"Literal","","A literal string (`\\\"hello\\\"`), byte string (`b\\\"hello\\\"`),…",null,null],[4,"TokenTree","","A single token or a delimited sequence of token trees…",null,null],[13,"Group","","A token stream surrounded by bracket delimiters.",0,null],[13,"Ident","","An identifier.",0,null],[13,"Punct","","A single punctuation character (`+`, `,`, `$`, etc.).",0,null],[13,"Literal","","A literal character (`\'a\'`), string (`\\\"hello\\\"`), number…",0,null],[4,"Delimiter","","Describes how a sequence of token trees is delimited.",null,null],[13,"Parenthesis","","`( ... )`",1,null],[13,"Brace","","`{ ... }`",1,null],[13,"Bracket","","`[ ... ]`",1,null],[13,"None","","`Ø ... Ø`",1,null],[4,"Spacing","","Whether an `Punct` is followed immediately by another…",null,null],[13,"Alone","","E.g. `+` is `Alone` in `+ =`, `+ident` or `+()`.",2,null],[13,"Joint","","E.g. `+` is `Joint` in `+=` or `\'` is `Joint` in `\'#`.",2,null],[0,"token_stream","","Public implementation details for the `TokenStream` type,…",null,null],[3,"IntoIter","proc_macro2::token_stream","An iterator over `TokenStream`\'s `TokenTree`s.",null,null],[11,"new","proc_macro2","Returns an empty `TokenStream` containing no token trees.",3,[[],["tokenstream",3]]],[11,"is_empty","","Checks if this `TokenStream` is empty.",3,[[]]],[11,"call_site","","The span of the invocation of the current procedural macro.",4,[[],["span",3]]],[11,"unwrap","","Convert `proc_macro2::Span` to `proc_macro::Span`.",4,[[],["span",3]]],[11,"join","","Create a new span encompassing `self` and `other`.",4,[[["span",3]],[["span",3],["option",4]]]],[11,"span","","Returns the span of this tree, delegating to the `span`…",0,[[],["span",3]]],[11,"set_span","","Configures the span for only this token.",0,[[["span",3]]]],[11,"new","","Creates a new `Group` with the given delimiter and token…",5,[[["delimiter",4],["tokenstream",3]],["group",3]]],[11,"delimiter","","Returns the delimiter of this `Group`",5,[[],["delimiter",4]]],[11,"stream","","Returns the `TokenStream` of tokens that are delimited in…",5,[[],["tokenstream",3]]],[11,"span","","Returns the span for the delimiters of this token stream,…",5,[[],["span",3]]],[11,"span_open","","Returns the span pointing to the opening delimiter of this…",5,[[],["span",3]]],[11,"span_close","","Returns the span pointing to the closing delimiter of this…",5,[[],["span",3]]],[11,"set_span","","Configures the span for this `Group`\'s delimiters, but not…",5,[[["span",3]]]],[11,"new","","Creates a new `Punct` from the given character and spacing.",6,[[["spacing",4]],["punct",3]]],[11,"as_char","","Returns the value of this punctuation character as `char`.",6,[[]]],[11,"spacing","","Returns the spacing of this punctuation character,…",6,[[],["spacing",4]]],[11,"span","","Returns the span for this punctuation character.",6,[[],["span",3]]],[11,"set_span","","Configure the span for this punctuation character.",6,[[["span",3]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as…",7,[[["span",3]],["ident",3]]],[11,"span","","Returns the span of this `Ident`.",7,[[],["span",3]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its…",7,[[["span",3]]]],[11,"u8_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"u16_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"u32_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"u64_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"u128_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"usize_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"i8_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"i16_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"i32_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"i64_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"i128_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"isize_suffixed","","Creates a new suffixed integer literal with the specified…",8,[[],["literal",3]]],[11,"u8_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"u16_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"u32_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"u64_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"u128_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"usize_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"i8_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"i16_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"i32_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"i64_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"i128_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"isize_unsuffixed","","Creates a new unsuffixed integer literal with the…",8,[[],["literal",3]]],[11,"f64_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[],["literal",3]]],[11,"f64_suffixed","","Creates a new suffixed floating-point literal.",8,[[],["literal",3]]],[11,"f32_unsuffixed","","Creates a new unsuffixed floating-point literal.",8,[[],["literal",3]]],[11,"f32_suffixed","","Creates a new suffixed floating-point literal.",8,[[],["literal",3]]],[11,"string","","String literal.",8,[[],["literal",3]]],[11,"character","","Character literal.",8,[[],["literal",3]]],[11,"byte_string","","Byte string literal.",8,[[],["literal",3]]],[11,"span","","Returns the span encompassing this literal.",8,[[],["span",3]]],[11,"set_span","","Configures the span associated for this literal.",8,[[["span",3]]]],[11,"subspan","","Returns a `Span` that is a subset of `self.span()`…",8,[[["rangebounds",8]],[["span",3],["option",4]]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","proc_macro2::token_stream","",10,[[]]],[11,"into","","",10,[[]]],[11,"into_iter","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","proc_macro2","",4,[[["span",3]],["span",3]]],[11,"from","","",3,[[["tokenstream",3]],["tokenstream",3]]],[11,"from","","",3,[[["tokentree",4]]]],[11,"from","","",0,[[["group",3]],["tokentree",4]]],[11,"from","","",0,[[["ident",3]],["tokentree",4]]],[11,"from","","",0,[[["punct",3]],["tokentree",4]]],[11,"from","","",0,[[["literal",3]],["tokentree",4]]],[11,"extend","","",3,[[["intoiterator",8]]]],[11,"extend","","",3,[[["intoiterator",8]]]],[11,"into_iter","","",3,[[],["intoiter",3]]],[11,"next","proc_macro2::token_stream","",10,[[],[["tokentree",4],["option",4]]]],[11,"clone","proc_macro2","",3,[[],["tokenstream",3]]],[11,"clone","","",4,[[],["span",3]]],[11,"clone","","",0,[[],["tokentree",4]]],[11,"clone","","",5,[[],["group",3]]],[11,"clone","","",1,[[],["delimiter",4]]],[11,"clone","","",6,[[],["punct",3]]],[11,"clone","","",2,[[],["spacing",4]]],[11,"clone","","",7,[[],["ident",3]]],[11,"clone","","",8,[[],["literal",3]]],[11,"clone","proc_macro2::token_stream","",10,[[],["intoiter",3]]],[11,"default","proc_macro2","",3,[[]]],[11,"cmp","","",7,[[["ident",3]],["ordering",4]]],[11,"eq","","",1,[[["delimiter",4]]]],[11,"eq","","",2,[[["spacing",4]]]],[11,"eq","","",7,[[["ident",3]]]],[11,"eq","","",7,[[]]],[11,"partial_cmp","","",7,[[["ident",3]],[["ordering",4],["option",4]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","proc_macro2::token_stream","",10,[[["formatter",3]],["result",6]]],[11,"fmt","proc_macro2","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"hash","","",7,[[]]],[11,"from_iter","","",3,[[["intoiterator",8]]]],[11,"from_iter","","",3,[[["intoiterator",8]]]],[11,"from_str","","",3,[[],[["lexerror",3],["result",4],["tokenstream",3]]]]],"p":[[4,"TokenTree"],[4,"Delimiter"],[4,"Spacing"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Punct"],[3,"Ident"],[3,"Literal"],[3,"LexError"],[3,"IntoIter"]]},\
"quote":{"doc":"![github] ![crates-io] ![docs-rs]","i":[[8,"TokenStreamExt","quote","TokenStream extension trait with methods for appending…",null,null],[10,"append","","For use by `ToTokens` implementations.",0,[[]]],[10,"append_all","","For use by `ToTokens` implementations.",0,[[]]],[10,"append_separated","","For use by `ToTokens` implementations.",0,[[]]],[10,"append_terminated","","For use by `ToTokens` implementations.",0,[[]]],[8,"IdentFragment","","Specialized formatting trait used by `format_ident!`.",null,null],[10,"fmt","","Format this value as an identifier fragment.",1,[[["formatter",3]],["result",6]]],[11,"span","","Span associated with this `IdentFragment`.",1,[[],[["span",3],["option",4]]]],[8,"ToTokens","","Types that can be interpolated inside a `quote!` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `TokenStream`.",2,[[["tokenstream",3]]]],[11,"to_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream",3]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream",3]]],[14,"format_ident","","Formatting macro for constructing `Ident`s.",null,null],[14,"quote","","The whole point.",null,null],[14,"quote_spanned","","Same as `quote!`, but applies a given span to all tokens…",null,null],[11,"span","","Span associated with this `IdentFragment`.",1,[[],[["span",3],["option",4]]]],[11,"to_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream",3]]],[11,"into_token_stream","","Convert `self` directly into a `TokenStream` object.",2,[[],["tokenstream",3]]]],"p":[[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"syn":{"doc":"![github] ![crates-io] ![docs-rs]","i":[[3,"Ident","syn","A word of Rust code, which may be a keyword or legal…",null,null],[3,"Attribute","","An attribute like `#[repr(transparent)]`.",null,null],[12,"pound_token","","",0,null],[12,"style","","",0,null],[12,"bracket_token","","",0,null],[12,"path","","",0,null],[12,"tokens","","",0,null],[3,"MetaList","","A structured list within an attribute, like `derive(Copy,…",null,null],[12,"path","","",1,null],[12,"paren_token","","",1,null],[12,"nested","","",1,null],[3,"MetaNameValue","","A name-value pair within an attribute, like `feature =…",null,null],[12,"path","","",2,null],[12,"eq_token","","",2,null],[12,"lit","","",2,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"attrs","","Attributes tagged on the field.",3,null],[12,"vis","","Visibility of the field.",3,null],[12,"ident","","Name of the field, if any.",3,null],[12,"colon_token","","",3,null],[12,"ty","","Type of the field.",3,null],[3,"FieldsNamed","","Named fields of a struct or struct variant such as `Point…",null,null],[12,"brace_token","","",4,null],[12,"named","","",4,null],[3,"FieldsUnnamed","","Unnamed fields of a tuple struct or tuple variant such as…",null,null],[12,"paren_token","","",5,null],[12,"unnamed","","",5,null],[3,"Variant","","An enum variant.",null,null],[12,"attrs","","Attributes tagged on the variant.",6,null],[12,"ident","","Name of the variant.",6,null],[12,"fields","","Content stored in the variant.",6,null],[12,"discriminant","","Explicit discriminant: `Variant = 1`",6,null],[3,"VisCrate","","A crate-level visibility: `crate`.",null,null],[12,"crate_token","","",7,null],[3,"VisPublic","","A public visibility level: `pub`.",null,null],[12,"pub_token","","",8,null],[3,"VisRestricted","","A visibility level restricted to some path: `pub(self)` or…",null,null],[12,"pub_token","","",9,null],[12,"paren_token","","",9,null],[12,"in_token","","",9,null],[12,"path","","",9,null],[3,"ExprArray","","A slice literal expression: `[a, b, c, d]`.",null,null],[3,"ExprAssign","","An assignment expression: `a = compute()`.",null,null],[3,"ExprAssignOp","","A compound assignment expression: `counter += 1`.",null,null],[3,"ExprAsync","","An async block: `async { ... }`.",null,null],[3,"ExprAwait","","An await expression: `fut.await`.",null,null],[3,"ExprBinary","","A binary operation: `a + b`, `a * b`.",null,null],[12,"attrs","","",10,null],[12,"left","","",10,null],[12,"op","","",10,null],[12,"right","","",10,null],[3,"ExprBlock","","A blocked scope: `{ ... }`.",null,null],[3,"ExprBox","","A box expression: `box f`.",null,null],[3,"ExprBreak","","A `break`, with an optional label to break and an optional…",null,null],[3,"ExprCall","","A function call expression: `invoke(a, b)`.",null,null],[12,"attrs","","",11,null],[12,"func","","",11,null],[12,"paren_token","","",11,null],[12,"args","","",11,null],[3,"ExprCast","","A cast expression: `foo as f64`.",null,null],[12,"attrs","","",12,null],[12,"expr","","",12,null],[12,"as_token","","",12,null],[12,"ty","","",12,null],[3,"ExprClosure","","A closure expression: `|a, b| a + b`.",null,null],[3,"ExprContinue","","A `continue`, with an optional label.",null,null],[3,"ExprField","","Access of a named struct field (`obj.k`) or unnamed tuple…",null,null],[12,"attrs","","",13,null],[12,"base","","",13,null],[12,"dot_token","","",13,null],[12,"member","","",13,null],[3,"ExprForLoop","","A for loop: `for pat in expr { ... }`.",null,null],[3,"ExprGroup","","An expression contained within invisible delimiters.",null,null],[3,"ExprIf","","An `if` expression with an optional `else` block: `if expr…",null,null],[3,"ExprIndex","","A square bracketed indexing expression: `vector[2]`.",null,null],[12,"attrs","","",14,null],[12,"expr","","",14,null],[12,"bracket_token","","",14,null],[12,"index","","",14,null],[3,"ExprLet","","A `let` guard: `let Some(x) = opt`.",null,null],[3,"ExprLit","","A literal in place of an expression: `1`, `\\\"foo\\\"`.",null,null],[12,"attrs","","",15,null],[12,"lit","","",15,null],[3,"ExprLoop","","Conditionless loop: `loop { ... }`.",null,null],[3,"ExprMacro","","A macro invocation expression: `format!(\\\"{}\\\", q)`.",null,null],[3,"ExprMatch","","A `match` expression: `match n { Some(n) => {}, None => {}…",null,null],[3,"ExprMethodCall","","A method call expression: `x.foo::<T>(a, b)`.",null,null],[3,"ExprParen","","A parenthesized expression: `(a + b)`.",null,null],[12,"attrs","","",16,null],[12,"paren_token","","",16,null],[12,"expr","","",16,null],[3,"ExprPath","","A path like `std::mem::replace` possibly containing…",null,null],[12,"attrs","","",17,null],[12,"qself","","",17,null],[12,"path","","",17,null],[3,"ExprRange","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",null,null],[3,"ExprReference","","A referencing operation: `&a` or `&mut a`.",null,null],[3,"ExprRepeat","","An array literal constructed from one repeated element:…",null,null],[3,"ExprReturn","","A `return`, with an optional value to be returned.",null,null],[3,"ExprStruct","","A struct literal expression: `Point { x: 1, y: 1 }`.",null,null],[3,"ExprTry","","A try-expression: `expr?`.",null,null],[3,"ExprTryBlock","","A try block: `try { ... }`.",null,null],[3,"ExprTuple","","A tuple expression: `(a, b, c, d)`.",null,null],[3,"ExprType","","A type ascription expression: `foo: f64`.",null,null],[3,"ExprUnary","","A unary operation: `!x`, `*x`.",null,null],[12,"attrs","","",18,null],[12,"op","","",18,null],[12,"expr","","",18,null],[3,"ExprUnsafe","","An unsafe block: `unsafe { ... }`.",null,null],[3,"ExprWhile","","A while loop: `while expr { ... }`.",null,null],[3,"ExprYield","","A yield expression: `yield expr`.",null,null],[3,"Index","","The index of an unnamed tuple struct field.",null,null],[12,"index","","",19,null],[12,"span","","",19,null],[3,"BoundLifetimes","","A set of bound lifetimes: `for<\'a, \'b, \'c>`.",null,null],[12,"for_token","","",20,null],[12,"lt_token","","",20,null],[12,"lifetimes","","",20,null],[12,"gt_token","","",20,null],[3,"ConstParam","","A const generic parameter: `const LENGTH: usize`.",null,null],[12,"attrs","","",21,null],[12,"const_token","","",21,null],[12,"ident","","",21,null],[12,"colon_token","","",21,null],[12,"ty","","",21,null],[12,"eq_token","","",21,null],[12,"default","","",21,null],[3,"Generics","","Lifetimes and type parameters attached to a declaration of…",null,null],[12,"lt_token","","",22,null],[12,"params","","",22,null],[12,"gt_token","","",22,null],[12,"where_clause","","",22,null],[3,"LifetimeDef","","A lifetime definition: `\'a: \'b + \'c + \'d`.",null,null],[12,"attrs","","",23,null],[12,"lifetime","","",23,null],[12,"colon_token","","",23,null],[12,"bounds","","",23,null],[3,"PredicateEq","","An equality predicate in a `where` clause (unsupported).",null,null],[12,"lhs_ty","","",24,null],[12,"eq_token","","",24,null],[12,"rhs_ty","","",24,null],[3,"PredicateLifetime","","A lifetime predicate in a `where` clause: `\'a: \'b + \'c`.",null,null],[12,"lifetime","","",25,null],[12,"colon_token","","",25,null],[12,"bounds","","",25,null],[3,"PredicateType","","A type predicate in a `where` clause: `for<\'c> Foo<\'c>:…",null,null],[12,"lifetimes","","Any lifetimes from a `for` binding",26,null],[12,"bounded_ty","","The type being bounded",26,null],[12,"colon_token","","",26,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+\'static`)",26,null],[3,"TraitBound","","A trait used as a bound on a type parameter.",null,null],[12,"paren_token","","",27,null],[12,"modifier","","",27,null],[12,"lifetimes","","The `for<\'a>` in `for<\'a> Foo<&\'a T>`",27,null],[12,"path","","The `Foo<&\'a T>` in `for<\'a> Foo<&\'a T>`",27,null],[3,"TypeParam","","A generic type parameter: `T: Into<String>`.",null,null],[12,"attrs","","",28,null],[12,"ident","","",28,null],[12,"colon_token","","",28,null],[12,"bounds","","",28,null],[12,"eq_token","","",28,null],[12,"default","","",28,null],[3,"WhereClause","","A `where` clause in a definition: `where T:…",null,null],[12,"where_token","","",29,null],[12,"predicates","","",29,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TypeGenerics::as_turbofish`.",null,null],[3,"TypeGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Lifetime","","A Rust lifetime: `\'a`.",null,null],[12,"apostrophe","","",30,null],[12,"ident","","",30,null],[3,"LitBool","","A boolean literal: `true` or `false`.",null,null],[12,"value","","",31,null],[12,"span","","",31,null],[3,"LitByte","","A byte literal: `b\'f\'`.",null,null],[3,"LitByteStr","","A byte string literal: `b\\\"foo\\\"`.",null,null],[3,"LitChar","","A character literal: `\'a\'`.",null,null],[3,"LitFloat","","A floating point literal: `1f64` or `1.0e10f64`.",null,null],[3,"LitInt","","An integer literal: `1` or `1u16`.",null,null],[3,"LitStr","","A UTF-8 string literal: `\\\"foo\\\"`.",null,null],[3,"Macro","","A macro invocation: `println!(\\\"{}\\\", mac)`.",null,null],[12,"path","","",32,null],[12,"bang_token","","",32,null],[12,"delimiter","","",32,null],[12,"tokens","","",32,null],[3,"DataEnum","","An enum input to a `proc_macro_derive` macro.",null,null],[12,"enum_token","","",33,null],[12,"brace_token","","",33,null],[12,"variants","","",33,null],[3,"DataStruct","","A struct input to a `proc_macro_derive` macro.",null,null],[12,"struct_token","","",34,null],[12,"fields","","",34,null],[12,"semi_token","","",34,null],[3,"DataUnion","","An untagged union input to a `proc_macro_derive` macro.",null,null],[12,"union_token","","",35,null],[12,"fields","","",35,null],[3,"DeriveInput","","Data structure sent to a `proc_macro_derive` macro.",null,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",36,null],[12,"vis","","Visibility of the struct or enum.",36,null],[12,"ident","","Name of the struct or enum.",36,null],[12,"generics","","Generics required to complete the definition.",36,null],[12,"data","","Data within the struct or enum.",36,null],[3,"Abi","","The binary interface of a function: `extern \\\"C\\\"`.",null,null],[12,"extern_token","","",37,null],[12,"name","","",37,null],[3,"BareFnArg","","An argument in a function type: the `usize` in `fn(usize)…",null,null],[12,"attrs","","",38,null],[12,"name","","",38,null],[12,"ty","","",38,null],[3,"TypeArray","","A fixed size array type: `[T; n]`.",null,null],[12,"bracket_token","","",39,null],[12,"elem","","",39,null],[12,"semi_token","","",39,null],[12,"len","","",39,null],[3,"TypeBareFn","","A bare function type: `fn(usize) -> bool`.",null,null],[12,"lifetimes","","",40,null],[12,"unsafety","","",40,null],[12,"abi","","",40,null],[12,"fn_token","","",40,null],[12,"paren_token","","",40,null],[12,"inputs","","",40,null],[12,"variadic","","",40,null],[12,"output","","",40,null],[3,"TypeGroup","","A type contained within invisible delimiters.",null,null],[12,"group_token","","",41,null],[12,"elem","","",41,null],[3,"TypeImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a…",null,null],[12,"impl_token","","",42,null],[12,"bounds","","",42,null],[3,"TypeInfer","","Indication that a type should be inferred by the compiler:…",null,null],[12,"underscore_token","","",43,null],[3,"TypeMacro","","A macro in the type position.",null,null],[12,"mac","","",44,null],[3,"TypeNever","","The never type: `!`.",null,null],[12,"bang_token","","",45,null],[3,"TypeParen","","A parenthesized type equivalent to the inner type.",null,null],[12,"paren_token","","",46,null],[12,"elem","","",46,null],[3,"TypePath","","A path like `std::slice::Iter`, optionally qualified with…",null,null],[12,"qself","","",47,null],[12,"path","","",47,null],[3,"TypePtr","","A raw pointer type: `*const T` or `*mut T`.",null,null],[12,"star_token","","",48,null],[12,"const_token","","",48,null],[12,"mutability","","",48,null],[12,"elem","","",48,null],[3,"TypeReference","","A reference type: `&\'a T` or `&\'a mut T`.",null,null],[12,"and_token","","",49,null],[12,"lifetime","","",49,null],[12,"mutability","","",49,null],[12,"elem","","",49,null],[3,"TypeSlice","","A dynamically sized slice type: `[T]`.",null,null],[12,"bracket_token","","",50,null],[12,"elem","","",50,null],[3,"TypeTraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where…",null,null],[12,"dyn_token","","",51,null],[12,"bounds","","",51,null],[3,"TypeTuple","","A tuple type: `(A, B, C, String)`.",null,null],[12,"paren_token","","",52,null],[12,"elems","","",52,null],[3,"Variadic","","The variadic argument of a foreign function.",null,null],[12,"attrs","","",53,null],[12,"dots","","",53,null],[3,"AngleBracketedGenericArguments","","Angle bracketed arguments of a path segment: the `<K, V>`…",null,null],[12,"colon2_token","","",54,null],[12,"lt_token","","",54,null],[12,"args","","",54,null],[12,"gt_token","","",54,null],[3,"Binding","","A binding (equality constraint) on an associated type:…",null,null],[12,"ident","","",55,null],[12,"eq_token","","",55,null],[12,"ty","","",55,null],[3,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",null,null],[12,"ident","","",56,null],[12,"colon_token","","",56,null],[12,"bounds","","",56,null],[3,"ParenthesizedGenericArguments","","Arguments of a function path segment: the `(A, B) -> C` in…",null,null],[12,"paren_token","","",57,null],[12,"inputs","","`(A, B)`",57,null],[12,"output","","`C`",57,null],[3,"Path","","A path at which a named item is exported (e.g.…",null,null],[12,"leading_colon","","",58,null],[12,"segments","","",58,null],[3,"PathSegment","","A segment of a path together with any path arguments on…",null,null],[12,"ident","","",59,null],[12,"arguments","","",59,null],[3,"QSelf","","The explicit Self type in a qualified path: the `T` in `<T…",null,null],[12,"lt_token","","",60,null],[12,"ty","","",60,null],[12,"position","","",60,null],[12,"as_token","","",60,null],[12,"gt_token","","",60,null],[3,"Error","","Error returned when a Syn parser cannot parse the input…",null,null],[4,"AttrStyle","","Distinguishes between attributes that decorate an item and…",null,null],[13,"Outer","","",61,null],[13,"Inner","","",61,null],[4,"Meta","","Content of a compile-time structured attribute.",null,null],[13,"Path","","",62,null],[13,"List","","A structured list within an attribute, like `derive(Copy,…",62,null],[13,"NameValue","","A name-value pair within an attribute, like `feature =…",62,null],[4,"NestedMeta","","Element of a compile-time attribute list.",null,null],[13,"Meta","","A structured meta item, like the `Copy` in…",63,null],[13,"Lit","","A Rust literal, like the `\\\"new_name\\\"` in…",63,null],[4,"Fields","","Data stored within an enum variant or struct.",null,null],[13,"Named","","Named fields of a struct or struct variant such as `Point…",64,null],[13,"Unnamed","","Unnamed fields of a tuple struct or tuple variant such as…",64,null],[13,"Unit","","Unit struct or unit variant such as `None`.",64,null],[4,"Visibility","","The visibility level of an item: inherited or `pub` or…",null,null],[13,"Public","","A public visibility level: `pub`.",65,null],[13,"Crate","","A crate-level visibility: `crate`.",65,null],[13,"Restricted","","A visibility level restricted to some path: `pub(self)` or…",65,null],[13,"Inherited","","An inherited visibility, which usually means private.",65,null],[4,"Expr","","A Rust expression.",null,null],[13,"Array","","A slice literal expression: `[a, b, c, d]`.",66,null],[13,"Assign","","An assignment expression: `a = compute()`.",66,null],[13,"AssignOp","","A compound assignment expression: `counter += 1`.",66,null],[13,"Async","","An async block: `async { ... }`.",66,null],[13,"Await","","An await expression: `fut.await`.",66,null],[13,"Binary","","A binary operation: `a + b`, `a * b`.",66,null],[13,"Block","","A blocked scope: `{ ... }`.",66,null],[13,"Box","","A box expression: `box f`.",66,null],[13,"Break","","A `break`, with an optional label to break and an optional…",66,null],[13,"Call","","A function call expression: `invoke(a, b)`.",66,null],[13,"Cast","","A cast expression: `foo as f64`.",66,null],[13,"Closure","","A closure expression: `|a, b| a + b`.",66,null],[13,"Continue","","A `continue`, with an optional label.",66,null],[13,"Field","","Access of a named struct field (`obj.k`) or unnamed tuple…",66,null],[13,"ForLoop","","A for loop: `for pat in expr { ... }`.",66,null],[13,"Group","","An expression contained within invisible delimiters.",66,null],[13,"If","","An `if` expression with an optional `else` block: `if expr…",66,null],[13,"Index","","A square bracketed indexing expression: `vector[2]`.",66,null],[13,"Let","","A `let` guard: `let Some(x) = opt`.",66,null],[13,"Lit","","A literal in place of an expression: `1`, `\\\"foo\\\"`.",66,null],[13,"Loop","","Conditionless loop: `loop { ... }`.",66,null],[13,"Macro","","A macro invocation expression: `format!(\\\"{}\\\", q)`.",66,null],[13,"Match","","A `match` expression: `match n { Some(n) => {}, None => {}…",66,null],[13,"MethodCall","","A method call expression: `x.foo::<T>(a, b)`.",66,null],[13,"Paren","","A parenthesized expression: `(a + b)`.",66,null],[13,"Path","","A path like `std::mem::replace` possibly containing…",66,null],[13,"Range","","A range expression: `1..2`, `1..`, `..2`, `1..=2`, `..=2`.",66,null],[13,"Reference","","A referencing operation: `&a` or `&mut a`.",66,null],[13,"Repeat","","An array literal constructed from one repeated element:…",66,null],[13,"Return","","A `return`, with an optional value to be returned.",66,null],[13,"Struct","","A struct literal expression: `Point { x: 1, y: 1 }`.",66,null],[13,"Try","","A try-expression: `expr?`.",66,null],[13,"TryBlock","","A try block: `try { ... }`.",66,null],[13,"Tuple","","A tuple expression: `(a, b, c, d)`.",66,null],[13,"Type","","A type ascription expression: `foo: f64`.",66,null],[13,"Unary","","A unary operation: `!x`, `*x`.",66,null],[13,"Unsafe","","An unsafe block: `unsafe { ... }`.",66,null],[13,"Verbatim","","Tokens in expression position not interpreted by Syn.",66,null],[13,"While","","A while loop: `while expr { ... }`.",66,null],[13,"Yield","","A yield expression: `yield expr`.",66,null],[4,"Member","","A struct or tuple struct field accessed in a struct…",null,null],[13,"Named","","A named field like `self.x`.",67,null],[13,"Unnamed","","An unnamed field like `self.0`.",67,null],[4,"GenericParam","","A generic type parameter, lifetime, or const generic: `T:…",null,null],[13,"Type","","A generic type parameter: `T: Into<String>`.",68,null],[13,"Lifetime","","A lifetime definition: `\'a: \'b + \'c + \'d`.",68,null],[13,"Const","","A const generic parameter: `const LENGTH: usize`.",68,null],[4,"TraitBoundModifier","","A modifier on a trait bound, currently only used for the…",null,null],[13,"None","","",69,null],[13,"Maybe","","",69,null],[4,"TypeParamBound","","A trait or lifetime used as a bound on a type parameter.",null,null],[13,"Trait","","",70,null],[13,"Lifetime","","",70,null],[4,"WherePredicate","","A single predicate in a `where` clause: `T:…",null,null],[13,"Type","","A type predicate in a `where` clause: `for<\'c> Foo<\'c>:…",71,null],[13,"Lifetime","","A lifetime predicate in a `where` clause: `\'a: \'b + \'c`.",71,null],[13,"Eq","","An equality predicate in a `where` clause (unsupported).",71,null],[4,"Lit","","A Rust literal such as a string or integer or boolean.",null,null],[13,"Str","","A UTF-8 string literal: `\\\"foo\\\"`.",72,null],[13,"ByteStr","","A byte string literal: `b\\\"foo\\\"`.",72,null],[13,"Byte","","A byte literal: `b\'f\'`.",72,null],[13,"Char","","A character literal: `\'a\'`.",72,null],[13,"Int","","An integer literal: `1` or `1u16`.",72,null],[13,"Float","","A floating point literal: `1f64` or `1.0e10f64`.",72,null],[13,"Bool","","A boolean literal: `true` or `false`.",72,null],[13,"Verbatim","","A raw token literal not interpreted by Syn.",72,null],[4,"StrStyle","","The style of a string literal, either plain quoted or a…",null,null],[13,"Cooked","","An ordinary string like `\\\"data\\\"`.",73,null],[13,"Raw","","A raw string like `r##\\\"data\\\"##`.",73,null],[4,"MacroDelimiter","","A grouping token that surrounds a macro body: `m!(...)` or…",null,null],[13,"Paren","","",74,null],[13,"Brace","","",74,null],[13,"Bracket","","",74,null],[4,"Data","","The storage of a struct, enum or union data structure.",null,null],[13,"Struct","","A struct input to a `proc_macro_derive` macro.",75,null],[13,"Enum","","An enum input to a `proc_macro_derive` macro.",75,null],[13,"Union","","An untagged union input to a `proc_macro_derive` macro.",75,null],[4,"BinOp","","A binary operator: `+`, `+=`, `&`.",null,null],[13,"Add","","The `+` operator (addition)",76,null],[13,"Sub","","The `-` operator (subtraction)",76,null],[13,"Mul","","The `*` operator (multiplication)",76,null],[13,"Div","","The `/` operator (division)",76,null],[13,"Rem","","The `%` operator (modulus)",76,null],[13,"And","","The `&&` operator (logical and)",76,null],[13,"Or","","The `||` operator (logical or)",76,null],[13,"BitXor","","The `^` operator (bitwise xor)",76,null],[13,"BitAnd","","The `&` operator (bitwise and)",76,null],[13,"BitOr","","The `|` operator (bitwise or)",76,null],[13,"Shl","","The `<<` operator (shift left)",76,null],[13,"Shr","","The `>>` operator (shift right)",76,null],[13,"Eq","","The `==` operator (equality)",76,null],[13,"Lt","","The `<` operator (less than)",76,null],[13,"Le","","The `<=` operator (less than or equal to)",76,null],[13,"Ne","","The `!=` operator (not equal to)",76,null],[13,"Ge","","The `>=` operator (greater than or equal to)",76,null],[13,"Gt","","The `>` operator (greater than)",76,null],[13,"AddEq","","The `+=` operator",76,null],[13,"SubEq","","The `-=` operator",76,null],[13,"MulEq","","The `*=` operator",76,null],[13,"DivEq","","The `/=` operator",76,null],[13,"RemEq","","The `%=` operator",76,null],[13,"BitXorEq","","The `^=` operator",76,null],[13,"BitAndEq","","The `&=` operator",76,null],[13,"BitOrEq","","The `|=` operator",76,null],[13,"ShlEq","","The `<<=` operator",76,null],[13,"ShrEq","","The `>>=` operator",76,null],[4,"UnOp","","A unary operator: `*`, `!`, `-`.",null,null],[13,"Deref","","The `*` operator for dereferencing",77,null],[13,"Not","","The `!` operator for logical inversion",77,null],[13,"Neg","","The `-` operator for negation",77,null],[4,"ReturnType","","Return type of a function signature.",null,null],[13,"Default","","Return type is not specified.",78,null],[13,"Type","","A particular type is returned.",78,null],[4,"Type","","The possible types that a Rust value could have.",null,null],[13,"Array","","A fixed size array type: `[T; n]`.",79,null],[13,"BareFn","","A bare function type: `fn(usize) -> bool`.",79,null],[13,"Group","","A type contained within invisible delimiters.",79,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a…",79,null],[13,"Infer","","Indication that a type should be inferred by the compiler:…",79,null],[13,"Macro","","A macro in the type position.",79,null],[13,"Never","","The never type: `!`.",79,null],[13,"Paren","","A parenthesized type equivalent to the inner type.",79,null],[13,"Path","","A path like `std::slice::Iter`, optionally qualified with…",79,null],[13,"Ptr","","A raw pointer type: `*const T` or `*mut T`.",79,null],[13,"Reference","","A reference type: `&\'a T` or `&\'a mut T`.",79,null],[13,"Slice","","A dynamically sized slice type: `[T]`.",79,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where…",79,null],[13,"Tuple","","A tuple type: `(A, B, C, String)`.",79,null],[13,"Verbatim","","Tokens in type position not interpreted by Syn.",79,null],[4,"GenericArgument","","An individual generic argument, like `\'a`, `T`, or `Item =…",null,null],[13,"Lifetime","","A lifetime argument.",80,null],[13,"Type","","A type argument.",80,null],[13,"Binding","","A binding (equality constraint) on an associated type: the…",80,null],[13,"Constraint","","An associated type bound: `Iterator<Item: Display>`.",80,null],[13,"Const","","A const expression. Must be inside of a block.",80,null],[4,"PathArguments","","Angle bracketed or parenthesized arguments of a path…",null,null],[13,"None","","",81,null],[13,"AngleBracketed","","The `<\'a, T>` in `std::slice::iter<\'a, T>`.",81,null],[13,"Parenthesized","","The `(A, B) -> C` in `Fn(A, B) -> C`.",81,null],[5,"parse","","Parse tokens of source code into the chosen syntax tree…",null,[[["tokenstream",3]],[["parse",8],["result",6]]]],[5,"parse2","","Parse a proc-macro2 token stream into the chosen syntax…",null,[[["tokenstream",3]],[["parse",8],["result",6]]]],[5,"parse_str","","Parse a string of Rust code into the chosen syntax tree…",null,[[],[["parse",8],["result",6]]]],[0,"token","","Tokens representing Rust punctuation, keywords, and…",null,null],[3,"Underscore","syn::token","`_`",null,null],[12,"spans","","",82,null],[3,"Abstract","","`abstract`",null,null],[12,"span","","",83,null],[3,"As","","`as`",null,null],[12,"span","","",84,null],[3,"Async","","`async`",null,null],[12,"span","","",85,null],[3,"Auto","","`auto`",null,null],[12,"span","","",86,null],[3,"Await","","`await`",null,null],[12,"span","","",87,null],[3,"Become","","`become`",null,null],[12,"span","","",88,null],[3,"Box","","`box`",null,null],[12,"span","","",89,null],[3,"Break","","`break`",null,null],[12,"span","","",90,null],[3,"Const","","`const`",null,null],[12,"span","","",91,null],[3,"Continue","","`continue`",null,null],[12,"span","","",92,null],[3,"Crate","","`crate`",null,null],[12,"span","","",93,null],[3,"Default","","`default`",null,null],[12,"span","","",94,null],[3,"Do","","`do`",null,null],[12,"span","","",95,null],[3,"Dyn","","`dyn`",null,null],[12,"span","","",96,null],[3,"Else","","`else`",null,null],[12,"span","","",97,null],[3,"Enum","","`enum`",null,null],[12,"span","","",98,null],[3,"Extern","","`extern`",null,null],[12,"span","","",99,null],[3,"Final","","`final`",null,null],[12,"span","","",100,null],[3,"Fn","","`fn`",null,null],[12,"span","","",101,null],[3,"For","","`for`",null,null],[12,"span","","",102,null],[3,"If","","`if`",null,null],[12,"span","","",103,null],[3,"Impl","","`impl`",null,null],[12,"span","","",104,null],[3,"In","","`in`",null,null],[12,"span","","",105,null],[3,"Let","","`let`",null,null],[12,"span","","",106,null],[3,"Loop","","`loop`",null,null],[12,"span","","",107,null],[3,"Macro","","`macro`",null,null],[12,"span","","",108,null],[3,"Match","","`match`",null,null],[12,"span","","",109,null],[3,"Mod","","`mod`",null,null],[12,"span","","",110,null],[3,"Move","","`move`",null,null],[12,"span","","",111,null],[3,"Mut","","`mut`",null,null],[12,"span","","",112,null],[3,"Override","","`override`",null,null],[12,"span","","",113,null],[3,"Priv","","`priv`",null,null],[12,"span","","",114,null],[3,"Pub","","`pub`",null,null],[12,"span","","",115,null],[3,"Ref","","`ref`",null,null],[12,"span","","",116,null],[3,"Return","","`return`",null,null],[12,"span","","",117,null],[3,"SelfType","","`Self`",null,null],[12,"span","","",118,null],[3,"SelfValue","","`self`",null,null],[12,"span","","",119,null],[3,"Static","","`static`",null,null],[12,"span","","",120,null],[3,"Struct","","`struct`",null,null],[12,"span","","",121,null],[3,"Super","","`super`",null,null],[12,"span","","",122,null],[3,"Trait","","`trait`",null,null],[12,"span","","",123,null],[3,"Try","","`try`",null,null],[12,"span","","",124,null],[3,"Type","","`type`",null,null],[12,"span","","",125,null],[3,"Typeof","","`typeof`",null,null],[12,"span","","",126,null],[3,"Union","","`union`",null,null],[12,"span","","",127,null],[3,"Unsafe","","`unsafe`",null,null],[12,"span","","",128,null],[3,"Unsized","","`unsized`",null,null],[12,"span","","",129,null],[3,"Use","","`use`",null,null],[12,"span","","",130,null],[3,"Virtual","","`virtual`",null,null],[12,"span","","",131,null],[3,"Where","","`where`",null,null],[12,"span","","",132,null],[3,"While","","`while`",null,null],[12,"span","","",133,null],[3,"Yield","","`yield`",null,null],[12,"span","","",134,null],[3,"Add","","`+`",null,null],[12,"spans","","",135,null],[3,"AddEq","","`+=`",null,null],[12,"spans","","",136,null],[3,"And","","`&`",null,null],[12,"spans","","",137,null],[3,"AndAnd","","`&&`",null,null],[12,"spans","","",138,null],[3,"AndEq","","`&=`",null,null],[12,"spans","","",139,null],[3,"At","","`@`",null,null],[12,"spans","","",140,null],[3,"Bang","","`!`",null,null],[12,"spans","","",141,null],[3,"Caret","","`^`",null,null],[12,"spans","","",142,null],[3,"CaretEq","","`^=`",null,null],[12,"spans","","",143,null],[3,"Colon","","`:`",null,null],[12,"spans","","",144,null],[3,"Colon2","","`::`",null,null],[12,"spans","","",145,null],[3,"Comma","","`,`",null,null],[12,"spans","","",146,null],[3,"Div","","`/`",null,null],[12,"spans","","",147,null],[3,"DivEq","","`/=`",null,null],[12,"spans","","",148,null],[3,"Dollar","","`$`",null,null],[12,"spans","","",149,null],[3,"Dot","","`.`",null,null],[12,"spans","","",150,null],[3,"Dot2","","`..`",null,null],[12,"spans","","",151,null],[3,"Dot3","","`...`",null,null],[12,"spans","","",152,null],[3,"DotDotEq","","`..=`",null,null],[12,"spans","","",153,null],[3,"Eq","","`=`",null,null],[12,"spans","","",154,null],[3,"EqEq","","`==`",null,null],[12,"spans","","",155,null],[3,"Ge","","`>=`",null,null],[12,"spans","","",156,null],[3,"Gt","","`>`",null,null],[12,"spans","","",157,null],[3,"Le","","`<=`",null,null],[12,"spans","","",158,null],[3,"Lt","","`<`",null,null],[12,"spans","","",159,null],[3,"MulEq","","`*=`",null,null],[12,"spans","","",160,null],[3,"Ne","","`!=`",null,null],[12,"spans","","",161,null],[3,"Or","","`|`",null,null],[12,"spans","","",162,null],[3,"OrEq","","`|=`",null,null],[12,"spans","","",163,null],[3,"OrOr","","`||`",null,null],[12,"spans","","",164,null],[3,"Pound","","`#`",null,null],[12,"spans","","",165,null],[3,"Question","","`?`",null,null],[12,"spans","","",166,null],[3,"RArrow","","`->`",null,null],[12,"spans","","",167,null],[3,"LArrow","","`<-`",null,null],[12,"spans","","",168,null],[3,"Rem","","`%`",null,null],[12,"spans","","",169,null],[3,"RemEq","","`%=`",null,null],[12,"spans","","",170,null],[3,"FatArrow","","`=>`",null,null],[12,"spans","","",171,null],[3,"Semi","","`;`",null,null],[12,"spans","","",172,null],[3,"Shl","","`<<`",null,null],[12,"spans","","",173,null],[3,"ShlEq","","`<<=`",null,null],[12,"spans","","",174,null],[3,"Shr","","`>>`",null,null],[12,"spans","","",175,null],[3,"ShrEq","","`>>=`",null,null],[12,"spans","","",176,null],[3,"Star","","`*`",null,null],[12,"spans","","",177,null],[3,"Sub","","`-`",null,null],[12,"spans","","",178,null],[3,"SubEq","","`-=`",null,null],[12,"spans","","",179,null],[3,"Tilde","","`~`",null,null],[12,"spans","","",180,null],[3,"Brace","","`{...}`",null,null],[12,"span","","",181,null],[3,"Bracket","","`[...]`",null,null],[12,"span","","",182,null],[3,"Paren","","`(...)`",null,null],[12,"span","","",183,null],[3,"Group","","None-delimited group",null,null],[12,"span","","",184,null],[8,"Token","","Marker trait for types that represent single tokens.",null,null],[11,"surround","","",181,[[["tokenstream",3]]]],[11,"surround","","",182,[[["tokenstream",3]]]],[11,"surround","","",183,[[["tokenstream",3]]]],[11,"surround","","",184,[[["tokenstream",3]]]],[11,"parse_meta","syn","Parses the content of the attribute, consisting of the…",0,[[],[["meta",4],["result",6]]]],[11,"parse_args","","Parse the arguments to the attribute as a syntax tree.",0,[[],[["parse",8],["result",6]]]],[11,"parse_args_with","","Parse the arguments to the attribute using the given parser.",0,[[["parser",8]],["result",6]]],[11,"parse_outer","","Parses zero or more outer attributes from the stream.",0,[[["parsestream",6]],[["result",6],["vec",3]]]],[11,"parse_inner","","Parses zero or more inner attributes from the stream.",0,[[["parsestream",6]],[["result",6],["vec",3]]]],[11,"path","","Returns the identifier that begins this structured meta…",62,[[],["path",3]]],[11,"parse_named","","Parses a named (braced struct) field.",3,[[["parsestream",6]],["result",6]]],[11,"parse_unnamed","","Parses an unnamed (tuple struct) field.",3,[[["parsestream",6]],["result",6]]],[11,"iter","","Get an iterator over the borrowed [`Field`] items in this…",64,[[],[["field",3],["iter",3]]]],[11,"iter_mut","","Get an iterator over the mutably borrowed [`Field`] items…",64,[[],[["itermut",3],["field",3]]]],[11,"len","","Returns the number of fields.",64,[[]]],[11,"is_empty","","Returns `true` if there are zero fields.",64,[[]]],[11,"type_params","","Returns an Iterator<Item = &TypeParam> over the type…",22,[[],["typeparams",3]]],[11,"type_params_mut","","Returns an Iterator<Item = &mut TypeParam> over the type…",22,[[],["typeparamsmut",3]]],[11,"lifetimes","","Returns an Iterator<Item = &LifetimeDef> over the lifetime…",22,[[],["lifetimes",3]]],[11,"lifetimes_mut","","Returns an Iterator<Item = &mut LifetimeDef> over the…",22,[[],["lifetimesmut",3]]],[11,"const_params","","Returns an Iterator<Item = &ConstParam> over the constant…",22,[[],["constparams",3]]],[11,"const_params_mut","","Returns an Iterator<Item = &mut ConstParam> over the…",22,[[],["constparamsmut",3]]],[11,"make_where_clause","","Initializes an empty `where`-clause if there is not one…",22,[[],["whereclause",3]]],[11,"split_for_impl","","Split a type\'s generics into the pieces required for…",22,[[]]],[11,"as_turbofish","","Turn a type\'s generics like `<X, Y>` into a turbofish like…",185,[[],["turbofish",3]]],[11,"new","","",23,[[["lifetime",3]]]],[11,"new","","Panics",30,[[["span",3]]]],[11,"new","","Interpret a Syn literal from a proc-macro2 literal.",72,[[["literal",3]]]],[11,"suffix","","",72,[[]]],[11,"new","","",186,[[["span",3]]]],[11,"value","","",186,[[],["string",3]]],[11,"parse","","Parse a syntax tree node from the content of this string…",186,[[],[["parse",8],["result",6]]]],[11,"parse_with","","Invoke parser on the content of this string literal.",186,[[["parser",8]],["result",6]]],[11,"span","","",186,[[],["span",3]]],[11,"set_span","","",186,[[["span",3]]]],[11,"suffix","","",186,[[]]],[11,"new","","",187,[[["span",3]]]],[11,"value","","",187,[[],["vec",3]]],[11,"span","","",187,[[],["span",3]]],[11,"set_span","","",187,[[["span",3]]]],[11,"suffix","","",187,[[]]],[11,"new","","",188,[[["span",3]]]],[11,"value","","",188,[[]]],[11,"span","","",188,[[],["span",3]]],[11,"set_span","","",188,[[["span",3]]]],[11,"suffix","","",188,[[]]],[11,"new","","",189,[[["span",3]]]],[11,"value","","",189,[[]]],[11,"span","","",189,[[],["span",3]]],[11,"set_span","","",189,[[["span",3]]]],[11,"suffix","","",189,[[]]],[11,"new","","",190,[[["span",3]]]],[11,"base10_digits","","",190,[[]]],[11,"base10_parse","","Parses the literal into a selected number type.",190,[[],["result",6]]],[11,"suffix","","",190,[[]]],[11,"span","","",190,[[],["span",3]]],[11,"set_span","","",190,[[["span",3]]]],[11,"new","","",191,[[["span",3]]]],[11,"base10_digits","","",191,[[]]],[11,"base10_parse","","",191,[[],["result",6]]],[11,"suffix","","",191,[[]]],[11,"span","","",191,[[],["span",3]]],[11,"set_span","","",191,[[["span",3]]]],[11,"parse_body","","Parse the tokens within the macro invocation\'s delimiters…",32,[[],[["parse",8],["result",6]]]],[11,"parse_body_with","","Parse the tokens within the macro invocation\'s delimiters…",32,[[["parser",8]],["result",6]]],[11,"without_plus","","In some positions, types may not contain the `+`…",79,[[["parsestream",6]],["result",6]]],[11,"without_plus","","",78,[[["parsestream",6]],["result",6]]],[11,"without_plus","","",51,[[["parsestream",6]],["result",6]]],[11,"parse_mod_style","","Parse a `Path` containing no path arguments on any of its…",58,[[["parsestream",6]],["result",6]]],[11,"is_ident","","Determines whether this is a path of length 1 equal to the…",58,[[]]],[11,"get_ident","","If this path consists of a single ident, returns the ident.",58,[[],[["option",4],["ident",3]]]],[11,"is_empty","","",81,[[]]],[0,"buffer","","A stably addressed token buffer supporting efficient…",null,null],[3,"TokenBuffer","syn::buffer","A buffer that can be efficiently traversed multiple times,…",null,null],[3,"Cursor","","A cheaply copyable cursor into a `TokenBuffer`.",null,null],[11,"new","","Creates a `TokenBuffer` containing all the tokens from the…",192,[[["tokenstream",3]],["tokenbuffer",3]]],[11,"new2","","Creates a `TokenBuffer` containing all the tokens from the…",192,[[["tokenstream",3]],["tokenbuffer",3]]],[11,"begin","","Creates a cursor referencing the first token in the buffer…",192,[[],["cursor",3]]],[11,"empty","","Creates a cursor referencing a static empty TokenStream.",193,[[]]],[11,"eof","","Checks whether the cursor is currently pointing at the end…",193,[[]]],[11,"group","","If the cursor is pointing at a `Group` with the given…",193,[[["delimiter",4]],["option",4]]],[11,"ident","","If the cursor is pointing at a `Ident`, returns it along…",193,[[],["option",4]]],[11,"punct","","If the cursor is pointing at an `Punct`, returns it along…",193,[[],["option",4]]],[11,"literal","","If the cursor is pointing at a `Literal`, return it along…",193,[[],["option",4]]],[11,"lifetime","","If the cursor is pointing at a `Lifetime`, returns it…",193,[[],["option",4]]],[11,"token_stream","","Copies all remaining tokens visible from this cursor into…",193,[[],["tokenstream",3]]],[11,"token_tree","","If the cursor is pointing at a `TokenTree`, returns it…",193,[[],["option",4]]],[11,"span","","Returns the `Span` of the current token, or…",193,[[],["span",3]]],[0,"ext","syn","Extension traits to provide parsing methods on foreign…",null,null],[8,"IdentExt","syn::ext","Additional methods for `Ident` not provided by proc-macro2…",null,null],[10,"parse_any","","Parses any identifier including keywords.",194,[[["parsestream",6]],["result",6]]],[18,"peek_any","","Peeks any identifier including keywords. Usage:…",194,null],[10,"unraw","","Strips the raw marker `r#`, if any, from the beginning of…",194,[[],["ident",3]]],[0,"punctuated","syn","A punctuated sequence of syntax tree nodes separated by…",null,null],[3,"Punctuated","syn::punctuated","A punctuated sequence of syntax tree nodes of type `T`…",null,null],[3,"Pairs","","An iterator over borrowed pairs of type `Pair<&T, &P>`.",null,null],[3,"PairsMut","","An iterator over mutably borrowed pairs of type `Pair<&mut…",null,null],[3,"IntoPairs","","An iterator over owned pairs of type `Pair<T, P>`.",null,null],[3,"IntoIter","","An iterator over owned values of type `T`.",null,null],[3,"Iter","","An iterator over borrowed values of type `&T`.",null,null],[3,"IterMut","","An iterator over mutably borrowed values of type `&mut T`.",null,null],[4,"Pair","","A single syntax tree node of type `T` followed by its…",null,null],[13,"Punctuated","","",195,null],[13,"End","","",195,null],[11,"new","","Creates an empty punctuated sequence.",196,[[],["punctuated",3]]],[11,"is_empty","","Determines whether this punctuated sequence is empty,…",196,[[]]],[11,"len","","Returns the number of syntax tree nodes in this punctuated…",196,[[]]],[11,"first","","Borrows the first element in this sequence.",196,[[],["option",4]]],[11,"first_mut","","Mutably borrows the first element in this sequence.",196,[[],["option",4]]],[11,"last","","Borrows the last element in this sequence.",196,[[],["option",4]]],[11,"last_mut","","Mutably borrows the last element in this sequence.",196,[[],["option",4]]],[11,"iter","","Returns an iterator over borrowed syntax tree nodes of…",196,[[],["iter",3]]],[11,"iter_mut","","Returns an iterator over mutably borrowed syntax tree…",196,[[],["itermut",3]]],[11,"pairs","","Returns an iterator over the contents of this sequence as…",196,[[],["pairs",3]]],[11,"pairs_mut","","Returns an iterator over the contents of this sequence as…",196,[[],["pairsmut",3]]],[11,"into_pairs","","Returns an iterator over the contents of this sequence as…",196,[[],["intopairs",3]]],[11,"push_value","","Appends a syntax tree node onto the end of this punctuated…",196,[[]]],[11,"push_punct","","Appends a trailing punctuation onto the end of this…",196,[[]]],[11,"pop","","Removes the last punctuated pair from this sequence, or…",196,[[],[["pair",4],["option",4]]]],[11,"trailing_punct","","Determines whether this punctuated sequence ends with a…",196,[[]]],[11,"empty_or_trailing","","Returns true if either this `Punctuated` is empty, or it…",196,[[]]],[11,"push","","Appends a syntax tree node onto the end of this punctuated…",196,[[]]],[11,"insert","","Inserts an element at position `index`.",196,[[]]],[11,"clear","","Clears the sequence of all values and punctuation, making…",196,[[]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by…",196,[[["parsestream",6]],["result",6]]],[11,"parse_terminated_with","","Parses zero or more occurrences of `T` using the given…",196,[[["parsestream",6]],["result",6]]],[11,"parse_separated_nonempty","","Parses one or more occurrences of `T` separated by…",196,[[["parsestream",6]],["result",6]]],[11,"parse_separated_nonempty_with","","Parses one or more occurrences of `T` using the given…",196,[[["parsestream",6]],["result",6]]],[11,"into_value","","Extracts the syntax tree node from this punctuated pair,…",195,[[]]],[11,"value","","Borrows the syntax tree node from this punctuated pair.",195,[[]]],[11,"value_mut","","Mutably borrows the syntax tree node from this punctuated…",195,[[]]],[11,"punct","","Borrows the punctuation from this punctuated pair, unless…",195,[[],["option",4]]],[11,"new","","Creates a punctuated pair out of a syntax tree node and an…",195,[[["option",4]]]],[11,"into_tuple","","Produces this punctuated pair as a tuple of syntax tree…",195,[[]]],[0,"spanned","syn","A trait that can provide the `Span` of the complete…",null,null],[8,"Spanned","syn::spanned","A trait that can provide the `Span` of the complete…",null,null],[10,"span","","Returns a `Span` covering the complete contents of this…",197,[[],["span",3]]],[0,"parse","syn","Parsing interface for parsing a token stream into a syntax…",null,null],[3,"Error","syn::parse","Error returned when a Syn parser cannot parse the input…",null,null],[3,"Lookahead1","","Support for checking the next token in a stream to decide…",null,null],[3,"ParseBuffer","","Cursor position within a buffered token stream.",null,null],[3,"StepCursor","","Cursor state associated with speculative parsing.",null,null],[3,"Nothing","","An empty syntax tree node that consumes no tokens when…",null,null],[0,"discouraged","","Extensions to the parsing API with niche applicability.",null,null],[8,"Speculative","syn::parse::discouraged","Extensions to the `ParseStream` API to support speculative…",null,null],[10,"advance_to","","Advance this parse stream to the position of a forked…",198,[[]]],[6,"Result","syn::parse","The result of a Syn parser.",null,null],[6,"ParseStream","","Input to a Syn parser function.",null,null],[8,"Peek","","Types that can be parsed by looking at just one token.",null,null],[8,"Parse","","Parsing interface implemented by all types that can be…",null,null],[10,"parse","","",199,[[["parsestream",6]],["result",6]]],[8,"Parser","","Parser that can parse Rust tokens into a particular syntax…",null,null],[16,"Output","","",200,null],[10,"parse2","","Parse a proc-macro2 token stream into the chosen syntax…",200,[[["tokenstream",3]],["result",6]]],[11,"parse","","Parse tokens of source code into the chosen syntax tree…",200,[[["tokenstream",3]],["result",6]]],[11,"parse_str","","Parse a string of Rust code into the chosen syntax tree…",200,[[],["result",6]]],[11,"error","","Triggers an error at the current position of the parse…",201,[[["display",8]],["error",3]]],[11,"parse","","Parses a syntax tree node of type `T`, advancing the…",202,[[],[["parse",8],["result",6]]]],[11,"call","","Calls the given parser function to parse a syntax tree…",202,[[],["result",6]]],[11,"peek","","Looks at the next token in the parse stream to determine…",202,[[["peek",8]]]],[11,"peek2","","Looks at the second-next token in the parse stream.",202,[[["peek",8]]]],[11,"peek3","","Looks at the third-next token in the parse stream.",202,[[["peek",8]]]],[11,"parse_terminated","","Parses zero or more occurrences of `T` separated by…",202,[[],[["result",6],["punctuated",3]]]],[11,"is_empty","","Returns whether there are tokens remaining in this stream.",202,[[]]],[11,"lookahead1","","Constructs a helper for peeking at the next token in this…",202,[[],["lookahead1",3]]],[11,"fork","","Forks a parse stream so that parsing tokens out of either…",202,[[]]],[11,"error","","Triggers an error at the current position of the parse…",202,[[["display",8]],["error",3]]],[11,"step","","Speculatively parses tokens from this parse stream,…",202,[[],["result",6]]],[11,"span","","Returns the `Span` of the next token in the parse stream,…",202,[[],["span",3]]],[11,"cursor","","Provides low-level access to the token representation…",202,[[],["cursor",3]]],[11,"new","syn","Usually the [`ParseStream::error`] method will be used…",203,[[["display",8],["span",3]]]],[11,"new_spanned","","Creates an error with the specified message spanning the…",203,[[["display",8],["totokens",8]]]],[11,"span","","The source location of the error.",203,[[],["span",3]]],[11,"to_compile_error","","Render the error as an invocation of [`compile_error!`].",203,[[],["tokenstream",3]]],[11,"combine","","Add another error message to self such that when…",203,[[["error",3]]]],[6,"AttributeArgs","","Conventional argument type associated with an invocation…",null,null],[6,"Result","","The result of a Syn parser.",null,null],[14,"parenthesized","","Parse a set of parentheses and expose their content to…",null,null],[14,"braced","","Parse a set of curly braces and expose their content to…",null,null],[14,"bracketed","","Parse a set of square brackets and expose their content to…",null,null],[14,"Token","","A type-macro that expands to the name of the Rust type…",null,null],[14,"parse_quote","","Quasi-quotation macro that accepts input like the…",null,null],[14,"parse_macro_input","","Parse the input TokenStream of a macro, triggering a…",null,null],[14,"custom_keyword","","Define a type that supports parsing and printing a given…",null,null],[14,"custom_punctuation","","Define a type that supports parsing and printing a…",null,null],[11,"peek","","",204,[[["cursor",3]]]],[11,"display","","",204,[[]]],[11,"span","","",204,[[],["span",3]]],[11,"from","","",204,[[]]],[11,"into","","",204,[[]]],[11,"to_owned","","",204,[[]]],[11,"clone_into","","",204,[[]]],[11,"to_string","","",204,[[],["string",3]]],[11,"try_from","","",204,[[],["result",4]]],[11,"try_into","","",204,[[],["result",4]]],[11,"borrow","","",204,[[]]],[11,"borrow_mut","","",204,[[]]],[11,"type_id","","",204,[[],["typeid",3]]],[11,"span","","",0,[[],["span",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"span","","",1,[[],["span",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"span","","",2,[[],["span",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"span","","",3,[[],["span",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"span","","",4,[[],["span",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"span","","",5,[[],["span",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"span","","",6,[[],["span",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"span","","",7,[[],["span",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"span","","",8,[[],["span",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"span","","",9,[[],["span",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"span","","",205,[[],["span",3]]],[11,"from","","",205,[[]]],[11,"into","","",205,[[]]],[11,"to_owned","","",205,[[]]],[11,"clone_into","","",205,[[]]],[11,"try_from","","",205,[[],["result",4]]],[11,"try_into","","",205,[[],["result",4]]],[11,"borrow","","",205,[[]]],[11,"borrow_mut","","",205,[[]]],[11,"type_id","","",205,[[],["typeid",3]]],[11,"span","","",206,[[],["span",3]]],[11,"from","","",206,[[]]],[11,"into","","",206,[[]]],[11,"to_owned","","",206,[[]]],[11,"clone_into","","",206,[[]]],[11,"try_from","","",206,[[],["result",4]]],[11,"try_into","","",206,[[],["result",4]]],[11,"borrow","","",206,[[]]],[11,"borrow_mut","","",206,[[]]],[11,"type_id","","",206,[[],["typeid",3]]],[11,"span","","",207,[[],["span",3]]],[11,"from","","",207,[[]]],[11,"into","","",207,[[]]],[11,"to_owned","","",207,[[]]],[11,"clone_into","","",207,[[]]],[11,"try_from","","",207,[[],["result",4]]],[11,"try_into","","",207,[[],["result",4]]],[11,"borrow","","",207,[[]]],[11,"borrow_mut","","",207,[[]]],[11,"type_id","","",207,[[],["typeid",3]]],[11,"span","","",208,[[],["span",3]]],[11,"from","","",208,[[]]],[11,"into","","",208,[[]]],[11,"to_owned","","",208,[[]]],[11,"clone_into","","",208,[[]]],[11,"try_from","","",208,[[],["result",4]]],[11,"try_into","","",208,[[],["result",4]]],[11,"borrow","","",208,[[]]],[11,"borrow_mut","","",208,[[]]],[11,"type_id","","",208,[[],["typeid",3]]],[11,"span","","",209,[[],["span",3]]],[11,"from","","",209,[[]]],[11,"into","","",209,[[]]],[11,"to_owned","","",209,[[]]],[11,"clone_into","","",209,[[]]],[11,"try_from","","",209,[[],["result",4]]],[11,"try_into","","",209,[[],["result",4]]],[11,"borrow","","",209,[[]]],[11,"borrow_mut","","",209,[[]]],[11,"type_id","","",209,[[],["typeid",3]]],[11,"span","","",10,[[],["span",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"span","","",210,[[],["span",3]]],[11,"from","","",210,[[]]],[11,"into","","",210,[[]]],[11,"to_owned","","",210,[[]]],[11,"clone_into","","",210,[[]]],[11,"try_from","","",210,[[],["result",4]]],[11,"try_into","","",210,[[],["result",4]]],[11,"borrow","","",210,[[]]],[11,"borrow_mut","","",210,[[]]],[11,"type_id","","",210,[[],["typeid",3]]],[11,"span","","",211,[[],["span",3]]],[11,"from","","",211,[[]]],[11,"into","","",211,[[]]],[11,"to_owned","","",211,[[]]],[11,"clone_into","","",211,[[]]],[11,"try_from","","",211,[[],["result",4]]],[11,"try_into","","",211,[[],["result",4]]],[11,"borrow","","",211,[[]]],[11,"borrow_mut","","",211,[[]]],[11,"type_id","","",211,[[],["typeid",3]]],[11,"span","","",212,[[],["span",3]]],[11,"from","","",212,[[]]],[11,"into","","",212,[[]]],[11,"to_owned","","",212,[[]]],[11,"clone_into","","",212,[[]]],[11,"try_from","","",212,[[],["result",4]]],[11,"try_into","","",212,[[],["result",4]]],[11,"borrow","","",212,[[]]],[11,"borrow_mut","","",212,[[]]],[11,"type_id","","",212,[[],["typeid",3]]],[11,"span","","",11,[[],["span",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"span","","",12,[[],["span",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"span","","",213,[[],["span",3]]],[11,"from","","",213,[[]]],[11,"into","","",213,[[]]],[11,"to_owned","","",213,[[]]],[11,"clone_into","","",213,[[]]],[11,"try_from","","",213,[[],["result",4]]],[11,"try_into","","",213,[[],["result",4]]],[11,"borrow","","",213,[[]]],[11,"borrow_mut","","",213,[[]]],[11,"type_id","","",213,[[],["typeid",3]]],[11,"span","","",214,[[],["span",3]]],[11,"from","","",214,[[]]],[11,"into","","",214,[[]]],[11,"to_owned","","",214,[[]]],[11,"clone_into","","",214,[[]]],[11,"try_from","","",214,[[],["result",4]]],[11,"try_into","","",214,[[],["result",4]]],[11,"borrow","","",214,[[]]],[11,"borrow_mut","","",214,[[]]],[11,"type_id","","",214,[[],["typeid",3]]],[11,"span","","",13,[[],["span",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"span","","",215,[[],["span",3]]],[11,"from","","",215,[[]]],[11,"into","","",215,[[]]],[11,"to_owned","","",215,[[]]],[11,"clone_into","","",215,[[]]],[11,"try_from","","",215,[[],["result",4]]],[11,"try_into","","",215,[[],["result",4]]],[11,"borrow","","",215,[[]]],[11,"borrow_mut","","",215,[[]]],[11,"type_id","","",215,[[],["typeid",3]]],[11,"span","","",216,[[],["span",3]]],[11,"from","","",216,[[]]],[11,"into","","",216,[[]]],[11,"to_owned","","",216,[[]]],[11,"clone_into","","",216,[[]]],[11,"try_from","","",216,[[],["result",4]]],[11,"try_into","","",216,[[],["result",4]]],[11,"borrow","","",216,[[]]],[11,"borrow_mut","","",216,[[]]],[11,"type_id","","",216,[[],["typeid",3]]],[11,"span","","",217,[[],["span",3]]],[11,"from","","",217,[[]]],[11,"into","","",217,[[]]],[11,"to_owned","","",217,[[]]],[11,"clone_into","","",217,[[]]],[11,"try_from","","",217,[[],["result",4]]],[11,"try_into","","",217,[[],["result",4]]],[11,"borrow","","",217,[[]]],[11,"borrow_mut","","",217,[[]]],[11,"type_id","","",217,[[],["typeid",3]]],[11,"span","","",14,[[],["span",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"span","","",218,[[],["span",3]]],[11,"from","","",218,[[]]],[11,"into","","",218,[[]]],[11,"to_owned","","",218,[[]]],[11,"clone_into","","",218,[[]]],[11,"try_from","","",218,[[],["result",4]]],[11,"try_into","","",218,[[],["result",4]]],[11,"borrow","","",218,[[]]],[11,"borrow_mut","","",218,[[]]],[11,"type_id","","",218,[[],["typeid",3]]],[11,"span","","",15,[[],["span",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"span","","",219,[[],["span",3]]],[11,"from","","",219,[[]]],[11,"into","","",219,[[]]],[11,"to_owned","","",219,[[]]],[11,"clone_into","","",219,[[]]],[11,"try_from","","",219,[[],["result",4]]],[11,"try_into","","",219,[[],["result",4]]],[11,"borrow","","",219,[[]]],[11,"borrow_mut","","",219,[[]]],[11,"type_id","","",219,[[],["typeid",3]]],[11,"span","","",220,[[],["span",3]]],[11,"from","","",220,[[]]],[11,"into","","",220,[[]]],[11,"to_owned","","",220,[[]]],[11,"clone_into","","",220,[[]]],[11,"try_from","","",220,[[],["result",4]]],[11,"try_into","","",220,[[],["result",4]]],[11,"borrow","","",220,[[]]],[11,"borrow_mut","","",220,[[]]],[11,"type_id","","",220,[[],["typeid",3]]],[11,"span","","",221,[[],["span",3]]],[11,"from","","",221,[[]]],[11,"into","","",221,[[]]],[11,"to_owned","","",221,[[]]],[11,"clone_into","","",221,[[]]],[11,"try_from","","",221,[[],["result",4]]],[11,"try_into","","",221,[[],["result",4]]],[11,"borrow","","",221,[[]]],[11,"borrow_mut","","",221,[[]]],[11,"type_id","","",221,[[],["typeid",3]]],[11,"span","","",222,[[],["span",3]]],[11,"from","","",222,[[]]],[11,"into","","",222,[[]]],[11,"to_owned","","",222,[[]]],[11,"clone_into","","",222,[[]]],[11,"try_from","","",222,[[],["result",4]]],[11,"try_into","","",222,[[],["result",4]]],[11,"borrow","","",222,[[]]],[11,"borrow_mut","","",222,[[]]],[11,"type_id","","",222,[[],["typeid",3]]],[11,"span","","",16,[[],["span",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"span","","",17,[[],["span",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"span","","",223,[[],["span",3]]],[11,"from","","",223,[[]]],[11,"into","","",223,[[]]],[11,"to_owned","","",223,[[]]],[11,"clone_into","","",223,[[]]],[11,"try_from","","",223,[[],["result",4]]],[11,"try_into","","",223,[[],["result",4]]],[11,"borrow","","",223,[[]]],[11,"borrow_mut","","",223,[[]]],[11,"type_id","","",223,[[],["typeid",3]]],[11,"span","","",224,[[],["span",3]]],[11,"from","","",224,[[]]],[11,"into","","",224,[[]]],[11,"to_owned","","",224,[[]]],[11,"clone_into","","",224,[[]]],[11,"try_from","","",224,[[],["result",4]]],[11,"try_into","","",224,[[],["result",4]]],[11,"borrow","","",224,[[]]],[11,"borrow_mut","","",224,[[]]],[11,"type_id","","",224,[[],["typeid",3]]],[11,"span","","",225,[[],["span",3]]],[11,"from","","",225,[[]]],[11,"into","","",225,[[]]],[11,"to_owned","","",225,[[]]],[11,"clone_into","","",225,[[]]],[11,"try_from","","",225,[[],["result",4]]],[11,"try_into","","",225,[[],["result",4]]],[11,"borrow","","",225,[[]]],[11,"borrow_mut","","",225,[[]]],[11,"type_id","","",225,[[],["typeid",3]]],[11,"span","","",226,[[],["span",3]]],[11,"from","","",226,[[]]],[11,"into","","",226,[[]]],[11,"to_owned","","",226,[[]]],[11,"clone_into","","",226,[[]]],[11,"try_from","","",226,[[],["result",4]]],[11,"try_into","","",226,[[],["result",4]]],[11,"borrow","","",226,[[]]],[11,"borrow_mut","","",226,[[]]],[11,"type_id","","",226,[[],["typeid",3]]],[11,"span","","",227,[[],["span",3]]],[11,"from","","",227,[[]]],[11,"into","","",227,[[]]],[11,"to_owned","","",227,[[]]],[11,"clone_into","","",227,[[]]],[11,"try_from","","",227,[[],["result",4]]],[11,"try_into","","",227,[[],["result",4]]],[11,"borrow","","",227,[[]]],[11,"borrow_mut","","",227,[[]]],[11,"type_id","","",227,[[],["typeid",3]]],[11,"span","","",228,[[],["span",3]]],[11,"from","","",228,[[]]],[11,"into","","",228,[[]]],[11,"to_owned","","",228,[[]]],[11,"clone_into","","",228,[[]]],[11,"try_from","","",228,[[],["result",4]]],[11,"try_into","","",228,[[],["result",4]]],[11,"borrow","","",228,[[]]],[11,"borrow_mut","","",228,[[]]],[11,"type_id","","",228,[[],["typeid",3]]],[11,"span","","",229,[[],["span",3]]],[11,"from","","",229,[[]]],[11,"into","","",229,[[]]],[11,"to_owned","","",229,[[]]],[11,"clone_into","","",229,[[]]],[11,"try_from","","",229,[[],["result",4]]],[11,"try_into","","",229,[[],["result",4]]],[11,"borrow","","",229,[[]]],[11,"borrow_mut","","",229,[[]]],[11,"type_id","","",229,[[],["typeid",3]]],[11,"span","","",230,[[],["span",3]]],[11,"from","","",230,[[]]],[11,"into","","",230,[[]]],[11,"to_owned","","",230,[[]]],[11,"clone_into","","",230,[[]]],[11,"try_from","","",230,[[],["result",4]]],[11,"try_into","","",230,[[],["result",4]]],[11,"borrow","","",230,[[]]],[11,"borrow_mut","","",230,[[]]],[11,"type_id","","",230,[[],["typeid",3]]],[11,"span","","",231,[[],["span",3]]],[11,"from","","",231,[[]]],[11,"into","","",231,[[]]],[11,"to_owned","","",231,[[]]],[11,"clone_into","","",231,[[]]],[11,"try_from","","",231,[[],["result",4]]],[11,"try_into","","",231,[[],["result",4]]],[11,"borrow","","",231,[[]]],[11,"borrow_mut","","",231,[[]]],[11,"type_id","","",231,[[],["typeid",3]]],[11,"span","","",18,[[],["span",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"span","","",232,[[],["span",3]]],[11,"from","","",232,[[]]],[11,"into","","",232,[[]]],[11,"to_owned","","",232,[[]]],[11,"clone_into","","",232,[[]]],[11,"try_from","","",232,[[],["result",4]]],[11,"try_into","","",232,[[],["result",4]]],[11,"borrow","","",232,[[]]],[11,"borrow_mut","","",232,[[]]],[11,"type_id","","",232,[[],["typeid",3]]],[11,"span","","",233,[[],["span",3]]],[11,"from","","",233,[[]]],[11,"into","","",233,[[]]],[11,"to_owned","","",233,[[]]],[11,"clone_into","","",233,[[]]],[11,"try_from","","",233,[[],["result",4]]],[11,"try_into","","",233,[[],["result",4]]],[11,"borrow","","",233,[[]]],[11,"borrow_mut","","",233,[[]]],[11,"type_id","","",233,[[],["typeid",3]]],[11,"span","","",234,[[],["span",3]]],[11,"from","","",234,[[]]],[11,"into","","",234,[[]]],[11,"to_owned","","",234,[[]]],[11,"clone_into","","",234,[[]]],[11,"try_from","","",234,[[],["result",4]]],[11,"try_into","","",234,[[],["result",4]]],[11,"borrow","","",234,[[]]],[11,"borrow_mut","","",234,[[]]],[11,"type_id","","",234,[[],["typeid",3]]],[11,"span","","",19,[[],["span",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"span","","",20,[[],["span",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"span","","",21,[[],["span",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"span","","",22,[[],["span",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"span","","",23,[[],["span",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"span","","",24,[[],["span",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"span","","",25,[[],["span",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"span","","",26,[[],["span",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"span","","",27,[[],["span",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"span","","",28,[[],["span",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"span","","",29,[[],["span",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"to_owned","","",29,[[]]],[11,"clone_into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"span","","",235,[[],["span",3]]],[11,"from","","",235,[[]]],[11,"into","","",235,[[]]],[11,"to_owned","","",235,[[]]],[11,"clone_into","","",235,[[]]],[11,"try_from","","",235,[[],["result",4]]],[11,"try_into","","",235,[[],["result",4]]],[11,"borrow","","",235,[[]]],[11,"borrow_mut","","",235,[[]]],[11,"type_id","","",235,[[],["typeid",3]]],[11,"span","","",236,[[],["span",3]]],[11,"from","","",236,[[]]],[11,"into","","",236,[[]]],[11,"to_owned","","",236,[[]]],[11,"clone_into","","",236,[[]]],[11,"try_from","","",236,[[],["result",4]]],[11,"try_into","","",236,[[],["result",4]]],[11,"borrow","","",236,[[]]],[11,"borrow_mut","","",236,[[]]],[11,"type_id","","",236,[[],["typeid",3]]],[11,"span","","",185,[[],["span",3]]],[11,"from","","",185,[[]]],[11,"into","","",185,[[]]],[11,"to_owned","","",185,[[]]],[11,"clone_into","","",185,[[]]],[11,"try_from","","",185,[[],["result",4]]],[11,"try_into","","",185,[[],["result",4]]],[11,"borrow","","",185,[[]]],[11,"borrow_mut","","",185,[[]]],[11,"type_id","","",185,[[],["typeid",3]]],[11,"peek","","",30,[[["cursor",3]]]],[11,"display","","",30,[[]]],[11,"span","","",30,[[],["span",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"to_string","","",30,[[],["string",3]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"peek","","",31,[[["cursor",3]]]],[11,"display","","",31,[[]]],[11,"span","","",31,[[],["span",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"peek","","",188,[[["cursor",3]]]],[11,"display","","",188,[[]]],[11,"span","","",188,[[],["span",3]]],[11,"from","","",188,[[]]],[11,"into","","",188,[[]]],[11,"to_owned","","",188,[[]]],[11,"clone_into","","",188,[[]]],[11,"try_from","","",188,[[],["result",4]]],[11,"try_into","","",188,[[],["result",4]]],[11,"borrow","","",188,[[]]],[11,"borrow_mut","","",188,[[]]],[11,"type_id","","",188,[[],["typeid",3]]],[11,"peek","","",187,[[["cursor",3]]]],[11,"display","","",187,[[]]],[11,"span","","",187,[[],["span",3]]],[11,"from","","",187,[[]]],[11,"into","","",187,[[]]],[11,"to_owned","","",187,[[]]],[11,"clone_into","","",187,[[]]],[11,"try_from","","",187,[[],["result",4]]],[11,"try_into","","",187,[[],["result",4]]],[11,"borrow","","",187,[[]]],[11,"borrow_mut","","",187,[[]]],[11,"type_id","","",187,[[],["typeid",3]]],[11,"peek","","",189,[[["cursor",3]]]],[11,"display","","",189,[[]]],[11,"span","","",189,[[],["span",3]]],[11,"from","","",189,[[]]],[11,"into","","",189,[[]]],[11,"to_owned","","",189,[[]]],[11,"clone_into","","",189,[[]]],[11,"try_from","","",189,[[],["result",4]]],[11,"try_into","","",189,[[],["result",4]]],[11,"borrow","","",189,[[]]],[11,"borrow_mut","","",189,[[]]],[11,"type_id","","",189,[[],["typeid",3]]],[11,"peek","","",191,[[["cursor",3]]]],[11,"display","","",191,[[]]],[11,"span","","",191,[[],["span",3]]],[11,"from","","",191,[[]]],[11,"into","","",191,[[]]],[11,"to_owned","","",191,[[]]],[11,"clone_into","","",191,[[]]],[11,"to_string","","",191,[[],["string",3]]],[11,"try_from","","",191,[[],["result",4]]],[11,"try_into","","",191,[[],["result",4]]],[11,"borrow","","",191,[[]]],[11,"borrow_mut","","",191,[[]]],[11,"type_id","","",191,[[],["typeid",3]]],[11,"peek","","",190,[[["cursor",3]]]],[11,"display","","",190,[[]]],[11,"span","","",190,[[],["span",3]]],[11,"from","","",190,[[]]],[11,"into","","",190,[[]]],[11,"to_owned","","",190,[[]]],[11,"clone_into","","",190,[[]]],[11,"to_string","","",190,[[],["string",3]]],[11,"try_from","","",190,[[],["result",4]]],[11,"try_into","","",190,[[],["result",4]]],[11,"borrow","","",190,[[]]],[11,"borrow_mut","","",190,[[]]],[11,"type_id","","",190,[[],["typeid",3]]],[11,"peek","","",186,[[["cursor",3]]]],[11,"display","","",186,[[]]],[11,"span","","",186,[[],["span",3]]],[11,"from","","",186,[[]]],[11,"into","","",186,[[]]],[11,"to_owned","","",186,[[]]],[11,"clone_into","","",186,[[]]],[11,"try_from","","",186,[[],["result",4]]],[11,"try_into","","",186,[[],["result",4]]],[11,"borrow","","",186,[[]]],[11,"borrow_mut","","",186,[[]]],[11,"type_id","","",186,[[],["typeid",3]]],[11,"span","","",32,[[],["span",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"span","","",36,[[],["span",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"span","","",37,[[],["span",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"span","","",38,[[],["span",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"span","","",39,[[],["span",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"span","","",40,[[],["span",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"span","","",41,[[],["span",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"span","","",42,[[],["span",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"span","","",43,[[],["span",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"span","","",44,[[],["span",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"span","","",45,[[],["span",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"span","","",46,[[],["span",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"span","","",47,[[],["span",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"span","","",48,[[],["span",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"span","","",49,[[],["span",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"span","","",50,[[],["span",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"span","","",51,[[],["span",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"span","","",52,[[],["span",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"span","","",53,[[],["span",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"span","","",54,[[],["span",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"span","","",55,[[],["span",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"span","","",56,[[],["span",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"span","","",57,[[],["span",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"span","","",58,[[],["span",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"span","","",59,[[],["span",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",203,[[]]],[11,"into","","",203,[[]]],[11,"into_iter","","",203,[[]]],[11,"to_owned","","",203,[[]]],[11,"clone_into","","",203,[[]]],[11,"to_string","","",203,[[],["string",3]]],[11,"try_from","","",203,[[],["result",4]]],[11,"try_into","","",203,[[],["result",4]]],[11,"borrow","","",203,[[]]],[11,"borrow_mut","","",203,[[]]],[11,"type_id","","",203,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"span","","",62,[[],["span",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"span","","",63,[[],["span",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"span","","",64,[[],["span",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"into_iter","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"span","","",65,[[],["span",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"span","","",66,[[],["span",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"span","","",67,[[],["span",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"span","","",68,[[],["span",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"span","","",69,[[],["span",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"span","","",70,[[],["span",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"span","","",71,[[],["span",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"peek","","",72,[[["cursor",3]]]],[11,"display","","",72,[[]]],[11,"span","","",72,[[],["span",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"span","","",76,[[],["span",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"span","","",77,[[],["span",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"span","","",78,[[],["span",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"span","","",79,[[],["span",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"span","","",80,[[],["span",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"span","","",81,[[],["span",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"peek","syn::token","",82,[[["cursor",3]]]],[11,"display","","",82,[[]]],[11,"span","","",82,[[],["span",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"peek","","",83,[[["cursor",3]]]],[11,"display","","",83,[[]]],[11,"span","","",83,[[],["span",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"peek","","",84,[[["cursor",3]]]],[11,"display","","",84,[[]]],[11,"span","","",84,[[],["span",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"peek","","",85,[[["cursor",3]]]],[11,"display","","",85,[[]]],[11,"span","","",85,[[],["span",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"peek","","",86,[[["cursor",3]]]],[11,"display","","",86,[[]]],[11,"span","","",86,[[],["span",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"peek","","",87,[[["cursor",3]]]],[11,"display","","",87,[[]]],[11,"span","","",87,[[],["span",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"peek","","",88,[[["cursor",3]]]],[11,"display","","",88,[[]]],[11,"span","","",88,[[],["span",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"peek","","",89,[[["cursor",3]]]],[11,"display","","",89,[[]]],[11,"span","","",89,[[],["span",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"peek","","",90,[[["cursor",3]]]],[11,"display","","",90,[[]]],[11,"span","","",90,[[],["span",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"peek","","",91,[[["cursor",3]]]],[11,"display","","",91,[[]]],[11,"span","","",91,[[],["span",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"peek","","",92,[[["cursor",3]]]],[11,"display","","",92,[[]]],[11,"span","","",92,[[],["span",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"peek","","",93,[[["cursor",3]]]],[11,"display","","",93,[[]]],[11,"span","","",93,[[],["span",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"peek","","",94,[[["cursor",3]]]],[11,"display","","",94,[[]]],[11,"span","","",94,[[],["span",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"peek","","",95,[[["cursor",3]]]],[11,"display","","",95,[[]]],[11,"span","","",95,[[],["span",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"peek","","",96,[[["cursor",3]]]],[11,"display","","",96,[[]]],[11,"span","","",96,[[],["span",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"peek","","",97,[[["cursor",3]]]],[11,"display","","",97,[[]]],[11,"span","","",97,[[],["span",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"peek","","",98,[[["cursor",3]]]],[11,"display","","",98,[[]]],[11,"span","","",98,[[],["span",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"peek","","",99,[[["cursor",3]]]],[11,"display","","",99,[[]]],[11,"span","","",99,[[],["span",3]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"peek","","",100,[[["cursor",3]]]],[11,"display","","",100,[[]]],[11,"span","","",100,[[],["span",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"peek","","",101,[[["cursor",3]]]],[11,"display","","",101,[[]]],[11,"span","","",101,[[],["span",3]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"peek","","",102,[[["cursor",3]]]],[11,"display","","",102,[[]]],[11,"span","","",102,[[],["span",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"peek","","",103,[[["cursor",3]]]],[11,"display","","",103,[[]]],[11,"span","","",103,[[],["span",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"peek","","",104,[[["cursor",3]]]],[11,"display","","",104,[[]]],[11,"span","","",104,[[],["span",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"peek","","",105,[[["cursor",3]]]],[11,"display","","",105,[[]]],[11,"span","","",105,[[],["span",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"peek","","",106,[[["cursor",3]]]],[11,"display","","",106,[[]]],[11,"span","","",106,[[],["span",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"peek","","",107,[[["cursor",3]]]],[11,"display","","",107,[[]]],[11,"span","","",107,[[],["span",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"peek","","",108,[[["cursor",3]]]],[11,"display","","",108,[[]]],[11,"span","","",108,[[],["span",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"peek","","",109,[[["cursor",3]]]],[11,"display","","",109,[[]]],[11,"span","","",109,[[],["span",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"peek","","",110,[[["cursor",3]]]],[11,"display","","",110,[[]]],[11,"span","","",110,[[],["span",3]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"peek","","",111,[[["cursor",3]]]],[11,"display","","",111,[[]]],[11,"span","","",111,[[],["span",3]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"peek","","",112,[[["cursor",3]]]],[11,"display","","",112,[[]]],[11,"span","","",112,[[],["span",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"peek","","",113,[[["cursor",3]]]],[11,"display","","",113,[[]]],[11,"span","","",113,[[],["span",3]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"peek","","",114,[[["cursor",3]]]],[11,"display","","",114,[[]]],[11,"span","","",114,[[],["span",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"peek","","",115,[[["cursor",3]]]],[11,"display","","",115,[[]]],[11,"span","","",115,[[],["span",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"peek","","",116,[[["cursor",3]]]],[11,"display","","",116,[[]]],[11,"span","","",116,[[],["span",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"peek","","",117,[[["cursor",3]]]],[11,"display","","",117,[[]]],[11,"span","","",117,[[],["span",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"peek","","",118,[[["cursor",3]]]],[11,"display","","",118,[[]]],[11,"span","","",118,[[],["span",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"peek","","",119,[[["cursor",3]]]],[11,"display","","",119,[[]]],[11,"span","","",119,[[],["span",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"peek","","",120,[[["cursor",3]]]],[11,"display","","",120,[[]]],[11,"span","","",120,[[],["span",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"peek","","",121,[[["cursor",3]]]],[11,"display","","",121,[[]]],[11,"span","","",121,[[],["span",3]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"peek","","",122,[[["cursor",3]]]],[11,"display","","",122,[[]]],[11,"span","","",122,[[],["span",3]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"peek","","",123,[[["cursor",3]]]],[11,"display","","",123,[[]]],[11,"span","","",123,[[],["span",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"peek","","",124,[[["cursor",3]]]],[11,"display","","",124,[[]]],[11,"span","","",124,[[],["span",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"peek","","",125,[[["cursor",3]]]],[11,"display","","",125,[[]]],[11,"span","","",125,[[],["span",3]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"peek","","",126,[[["cursor",3]]]],[11,"display","","",126,[[]]],[11,"span","","",126,[[],["span",3]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"peek","","",127,[[["cursor",3]]]],[11,"display","","",127,[[]]],[11,"span","","",127,[[],["span",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"peek","","",128,[[["cursor",3]]]],[11,"display","","",128,[[]]],[11,"span","","",128,[[],["span",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"peek","","",129,[[["cursor",3]]]],[11,"display","","",129,[[]]],[11,"span","","",129,[[],["span",3]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"peek","","",130,[[["cursor",3]]]],[11,"display","","",130,[[]]],[11,"span","","",130,[[],["span",3]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"to_owned","","",130,[[]]],[11,"clone_into","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"peek","","",131,[[["cursor",3]]]],[11,"display","","",131,[[]]],[11,"span","","",131,[[],["span",3]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"peek","","",132,[[["cursor",3]]]],[11,"display","","",132,[[]]],[11,"span","","",132,[[],["span",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"peek","","",133,[[["cursor",3]]]],[11,"display","","",133,[[]]],[11,"span","","",133,[[],["span",3]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"peek","","",134,[[["cursor",3]]]],[11,"display","","",134,[[]]],[11,"span","","",134,[[],["span",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"peek","","",135,[[["cursor",3]]]],[11,"display","","",135,[[]]],[11,"span","","",135,[[],["span",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"peek","","",136,[[["cursor",3]]]],[11,"display","","",136,[[]]],[11,"span","","",136,[[],["span",3]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"peek","","",137,[[["cursor",3]]]],[11,"display","","",137,[[]]],[11,"span","","",137,[[],["span",3]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"peek","","",138,[[["cursor",3]]]],[11,"display","","",138,[[]]],[11,"span","","",138,[[],["span",3]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"peek","","",139,[[["cursor",3]]]],[11,"display","","",139,[[]]],[11,"span","","",139,[[],["span",3]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"peek","","",140,[[["cursor",3]]]],[11,"display","","",140,[[]]],[11,"span","","",140,[[],["span",3]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"peek","","",141,[[["cursor",3]]]],[11,"display","","",141,[[]]],[11,"span","","",141,[[],["span",3]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"peek","","",142,[[["cursor",3]]]],[11,"display","","",142,[[]]],[11,"span","","",142,[[],["span",3]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"peek","","",143,[[["cursor",3]]]],[11,"display","","",143,[[]]],[11,"span","","",143,[[],["span",3]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"peek","","",144,[[["cursor",3]]]],[11,"display","","",144,[[]]],[11,"span","","",144,[[],["span",3]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"to_owned","","",144,[[]]],[11,"clone_into","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"peek","","",145,[[["cursor",3]]]],[11,"display","","",145,[[]]],[11,"span","","",145,[[],["span",3]]],[11,"from","","",145,[[]]],[11,"into","","",145,[[]]],[11,"to_owned","","",145,[[]]],[11,"clone_into","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"peek","","",146,[[["cursor",3]]]],[11,"display","","",146,[[]]],[11,"span","","",146,[[],["span",3]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_owned","","",146,[[]]],[11,"clone_into","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"peek","","",147,[[["cursor",3]]]],[11,"display","","",147,[[]]],[11,"span","","",147,[[],["span",3]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"to_owned","","",147,[[]]],[11,"clone_into","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"peek","","",148,[[["cursor",3]]]],[11,"display","","",148,[[]]],[11,"span","","",148,[[],["span",3]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"to_owned","","",148,[[]]],[11,"clone_into","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"peek","","",149,[[["cursor",3]]]],[11,"display","","",149,[[]]],[11,"span","","",149,[[],["span",3]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"to_owned","","",149,[[]]],[11,"clone_into","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"peek","","",150,[[["cursor",3]]]],[11,"display","","",150,[[]]],[11,"span","","",150,[[],["span",3]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"to_owned","","",150,[[]]],[11,"clone_into","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"peek","","",151,[[["cursor",3]]]],[11,"display","","",151,[[]]],[11,"span","","",151,[[],["span",3]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"peek","","",152,[[["cursor",3]]]],[11,"display","","",152,[[]]],[11,"span","","",152,[[],["span",3]]],[11,"from","","",152,[[]]],[11,"into","","",152,[[]]],[11,"to_owned","","",152,[[]]],[11,"clone_into","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"peek","","",153,[[["cursor",3]]]],[11,"display","","",153,[[]]],[11,"span","","",153,[[],["span",3]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"to_owned","","",153,[[]]],[11,"clone_into","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"peek","","",154,[[["cursor",3]]]],[11,"display","","",154,[[]]],[11,"span","","",154,[[],["span",3]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"to_owned","","",154,[[]]],[11,"clone_into","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"peek","","",155,[[["cursor",3]]]],[11,"display","","",155,[[]]],[11,"span","","",155,[[],["span",3]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"to_owned","","",155,[[]]],[11,"clone_into","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"peek","","",156,[[["cursor",3]]]],[11,"display","","",156,[[]]],[11,"span","","",156,[[],["span",3]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"to_owned","","",156,[[]]],[11,"clone_into","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"peek","","",157,[[["cursor",3]]]],[11,"display","","",157,[[]]],[11,"span","","",157,[[],["span",3]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"to_owned","","",157,[[]]],[11,"clone_into","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"peek","","",158,[[["cursor",3]]]],[11,"display","","",158,[[]]],[11,"span","","",158,[[],["span",3]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"to_owned","","",158,[[]]],[11,"clone_into","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"peek","","",159,[[["cursor",3]]]],[11,"display","","",159,[[]]],[11,"span","","",159,[[],["span",3]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"to_owned","","",159,[[]]],[11,"clone_into","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"peek","","",160,[[["cursor",3]]]],[11,"display","","",160,[[]]],[11,"span","","",160,[[],["span",3]]],[11,"from","","",160,[[]]],[11,"into","","",160,[[]]],[11,"to_owned","","",160,[[]]],[11,"clone_into","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"peek","","",161,[[["cursor",3]]]],[11,"display","","",161,[[]]],[11,"span","","",161,[[],["span",3]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"to_owned","","",161,[[]]],[11,"clone_into","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"peek","","",162,[[["cursor",3]]]],[11,"display","","",162,[[]]],[11,"span","","",162,[[],["span",3]]],[11,"from","","",162,[[]]],[11,"into","","",162,[[]]],[11,"to_owned","","",162,[[]]],[11,"clone_into","","",162,[[]]],[11,"try_from","","",162,[[],["result",4]]],[11,"try_into","","",162,[[],["result",4]]],[11,"borrow","","",162,[[]]],[11,"borrow_mut","","",162,[[]]],[11,"type_id","","",162,[[],["typeid",3]]],[11,"peek","","",163,[[["cursor",3]]]],[11,"display","","",163,[[]]],[11,"span","","",163,[[],["span",3]]],[11,"from","","",163,[[]]],[11,"into","","",163,[[]]],[11,"to_owned","","",163,[[]]],[11,"clone_into","","",163,[[]]],[11,"try_from","","",163,[[],["result",4]]],[11,"try_into","","",163,[[],["result",4]]],[11,"borrow","","",163,[[]]],[11,"borrow_mut","","",163,[[]]],[11,"type_id","","",163,[[],["typeid",3]]],[11,"peek","","",164,[[["cursor",3]]]],[11,"display","","",164,[[]]],[11,"span","","",164,[[],["span",3]]],[11,"from","","",164,[[]]],[11,"into","","",164,[[]]],[11,"to_owned","","",164,[[]]],[11,"clone_into","","",164,[[]]],[11,"try_from","","",164,[[],["result",4]]],[11,"try_into","","",164,[[],["result",4]]],[11,"borrow","","",164,[[]]],[11,"borrow_mut","","",164,[[]]],[11,"type_id","","",164,[[],["typeid",3]]],[11,"peek","","",165,[[["cursor",3]]]],[11,"display","","",165,[[]]],[11,"span","","",165,[[],["span",3]]],[11,"from","","",165,[[]]],[11,"into","","",165,[[]]],[11,"to_owned","","",165,[[]]],[11,"clone_into","","",165,[[]]],[11,"try_from","","",165,[[],["result",4]]],[11,"try_into","","",165,[[],["result",4]]],[11,"borrow","","",165,[[]]],[11,"borrow_mut","","",165,[[]]],[11,"type_id","","",165,[[],["typeid",3]]],[11,"peek","","",166,[[["cursor",3]]]],[11,"display","","",166,[[]]],[11,"span","","",166,[[],["span",3]]],[11,"from","","",166,[[]]],[11,"into","","",166,[[]]],[11,"to_owned","","",166,[[]]],[11,"clone_into","","",166,[[]]],[11,"try_from","","",166,[[],["result",4]]],[11,"try_into","","",166,[[],["result",4]]],[11,"borrow","","",166,[[]]],[11,"borrow_mut","","",166,[[]]],[11,"type_id","","",166,[[],["typeid",3]]],[11,"peek","","",167,[[["cursor",3]]]],[11,"display","","",167,[[]]],[11,"span","","",167,[[],["span",3]]],[11,"from","","",167,[[]]],[11,"into","","",167,[[]]],[11,"to_owned","","",167,[[]]],[11,"clone_into","","",167,[[]]],[11,"try_from","","",167,[[],["result",4]]],[11,"try_into","","",167,[[],["result",4]]],[11,"borrow","","",167,[[]]],[11,"borrow_mut","","",167,[[]]],[11,"type_id","","",167,[[],["typeid",3]]],[11,"peek","","",168,[[["cursor",3]]]],[11,"display","","",168,[[]]],[11,"span","","",168,[[],["span",3]]],[11,"from","","",168,[[]]],[11,"into","","",168,[[]]],[11,"to_owned","","",168,[[]]],[11,"clone_into","","",168,[[]]],[11,"try_from","","",168,[[],["result",4]]],[11,"try_into","","",168,[[],["result",4]]],[11,"borrow","","",168,[[]]],[11,"borrow_mut","","",168,[[]]],[11,"type_id","","",168,[[],["typeid",3]]],[11,"peek","","",169,[[["cursor",3]]]],[11,"display","","",169,[[]]],[11,"span","","",169,[[],["span",3]]],[11,"from","","",169,[[]]],[11,"into","","",169,[[]]],[11,"to_owned","","",169,[[]]],[11,"clone_into","","",169,[[]]],[11,"try_from","","",169,[[],["result",4]]],[11,"try_into","","",169,[[],["result",4]]],[11,"borrow","","",169,[[]]],[11,"borrow_mut","","",169,[[]]],[11,"type_id","","",169,[[],["typeid",3]]],[11,"peek","","",170,[[["cursor",3]]]],[11,"display","","",170,[[]]],[11,"span","","",170,[[],["span",3]]],[11,"from","","",170,[[]]],[11,"into","","",170,[[]]],[11,"to_owned","","",170,[[]]],[11,"clone_into","","",170,[[]]],[11,"try_from","","",170,[[],["result",4]]],[11,"try_into","","",170,[[],["result",4]]],[11,"borrow","","",170,[[]]],[11,"borrow_mut","","",170,[[]]],[11,"type_id","","",170,[[],["typeid",3]]],[11,"peek","","",171,[[["cursor",3]]]],[11,"display","","",171,[[]]],[11,"span","","",171,[[],["span",3]]],[11,"from","","",171,[[]]],[11,"into","","",171,[[]]],[11,"to_owned","","",171,[[]]],[11,"clone_into","","",171,[[]]],[11,"try_from","","",171,[[],["result",4]]],[11,"try_into","","",171,[[],["result",4]]],[11,"borrow","","",171,[[]]],[11,"borrow_mut","","",171,[[]]],[11,"type_id","","",171,[[],["typeid",3]]],[11,"peek","","",172,[[["cursor",3]]]],[11,"display","","",172,[[]]],[11,"span","","",172,[[],["span",3]]],[11,"from","","",172,[[]]],[11,"into","","",172,[[]]],[11,"to_owned","","",172,[[]]],[11,"clone_into","","",172,[[]]],[11,"try_from","","",172,[[],["result",4]]],[11,"try_into","","",172,[[],["result",4]]],[11,"borrow","","",172,[[]]],[11,"borrow_mut","","",172,[[]]],[11,"type_id","","",172,[[],["typeid",3]]],[11,"peek","","",173,[[["cursor",3]]]],[11,"display","","",173,[[]]],[11,"span","","",173,[[],["span",3]]],[11,"from","","",173,[[]]],[11,"into","","",173,[[]]],[11,"to_owned","","",173,[[]]],[11,"clone_into","","",173,[[]]],[11,"try_from","","",173,[[],["result",4]]],[11,"try_into","","",173,[[],["result",4]]],[11,"borrow","","",173,[[]]],[11,"borrow_mut","","",173,[[]]],[11,"type_id","","",173,[[],["typeid",3]]],[11,"peek","","",174,[[["cursor",3]]]],[11,"display","","",174,[[]]],[11,"span","","",174,[[],["span",3]]],[11,"from","","",174,[[]]],[11,"into","","",174,[[]]],[11,"to_owned","","",174,[[]]],[11,"clone_into","","",174,[[]]],[11,"try_from","","",174,[[],["result",4]]],[11,"try_into","","",174,[[],["result",4]]],[11,"borrow","","",174,[[]]],[11,"borrow_mut","","",174,[[]]],[11,"type_id","","",174,[[],["typeid",3]]],[11,"peek","","",175,[[["cursor",3]]]],[11,"display","","",175,[[]]],[11,"span","","",175,[[],["span",3]]],[11,"from","","",175,[[]]],[11,"into","","",175,[[]]],[11,"to_owned","","",175,[[]]],[11,"clone_into","","",175,[[]]],[11,"try_from","","",175,[[],["result",4]]],[11,"try_into","","",175,[[],["result",4]]],[11,"borrow","","",175,[[]]],[11,"borrow_mut","","",175,[[]]],[11,"type_id","","",175,[[],["typeid",3]]],[11,"peek","","",176,[[["cursor",3]]]],[11,"display","","",176,[[]]],[11,"span","","",176,[[],["span",3]]],[11,"from","","",176,[[]]],[11,"into","","",176,[[]]],[11,"to_owned","","",176,[[]]],[11,"clone_into","","",176,[[]]],[11,"try_from","","",176,[[],["result",4]]],[11,"try_into","","",176,[[],["result",4]]],[11,"borrow","","",176,[[]]],[11,"borrow_mut","","",176,[[]]],[11,"type_id","","",176,[[],["typeid",3]]],[11,"peek","","",177,[[["cursor",3]]]],[11,"display","","",177,[[]]],[11,"span","","",177,[[],["span",3]]],[11,"from","","",177,[[]]],[11,"into","","",177,[[]]],[11,"to_owned","","",177,[[]]],[11,"clone_into","","",177,[[]]],[11,"try_from","","",177,[[],["result",4]]],[11,"try_into","","",177,[[],["result",4]]],[11,"borrow","","",177,[[]]],[11,"borrow_mut","","",177,[[]]],[11,"type_id","","",177,[[],["typeid",3]]],[11,"peek","","",178,[[["cursor",3]]]],[11,"display","","",178,[[]]],[11,"span","","",178,[[],["span",3]]],[11,"from","","",178,[[]]],[11,"into","","",178,[[]]],[11,"to_owned","","",178,[[]]],[11,"clone_into","","",178,[[]]],[11,"try_from","","",178,[[],["result",4]]],[11,"try_into","","",178,[[],["result",4]]],[11,"borrow","","",178,[[]]],[11,"borrow_mut","","",178,[[]]],[11,"type_id","","",178,[[],["typeid",3]]],[11,"peek","","",179,[[["cursor",3]]]],[11,"display","","",179,[[]]],[11,"span","","",179,[[],["span",3]]],[11,"from","","",179,[[]]],[11,"into","","",179,[[]]],[11,"to_owned","","",179,[[]]],[11,"clone_into","","",179,[[]]],[11,"try_from","","",179,[[],["result",4]]],[11,"try_into","","",179,[[],["result",4]]],[11,"borrow","","",179,[[]]],[11,"borrow_mut","","",179,[[]]],[11,"type_id","","",179,[[],["typeid",3]]],[11,"peek","","",180,[[["cursor",3]]]],[11,"display","","",180,[[]]],[11,"span","","",180,[[],["span",3]]],[11,"from","","",180,[[]]],[11,"into","","",180,[[]]],[11,"to_owned","","",180,[[]]],[11,"clone_into","","",180,[[]]],[11,"try_from","","",180,[[],["result",4]]],[11,"try_into","","",180,[[],["result",4]]],[11,"borrow","","",180,[[]]],[11,"borrow_mut","","",180,[[]]],[11,"type_id","","",180,[[],["typeid",3]]],[11,"peek","","",181,[[["cursor",3]]]],[11,"display","","",181,[[]]],[11,"from","","",181,[[]]],[11,"into","","",181,[[]]],[11,"to_owned","","",181,[[]]],[11,"clone_into","","",181,[[]]],[11,"try_from","","",181,[[],["result",4]]],[11,"try_into","","",181,[[],["result",4]]],[11,"borrow","","",181,[[]]],[11,"borrow_mut","","",181,[[]]],[11,"type_id","","",181,[[],["typeid",3]]],[11,"peek","","",182,[[["cursor",3]]]],[11,"display","","",182,[[]]],[11,"from","","",182,[[]]],[11,"into","","",182,[[]]],[11,"to_owned","","",182,[[]]],[11,"clone_into","","",182,[[]]],[11,"try_from","","",182,[[],["result",4]]],[11,"try_into","","",182,[[],["result",4]]],[11,"borrow","","",182,[[]]],[11,"borrow_mut","","",182,[[]]],[11,"type_id","","",182,[[],["typeid",3]]],[11,"peek","","",183,[[["cursor",3]]]],[11,"display","","",183,[[]]],[11,"from","","",183,[[]]],[11,"into","","",183,[[]]],[11,"to_owned","","",183,[[]]],[11,"clone_into","","",183,[[]]],[11,"try_from","","",183,[[],["result",4]]],[11,"try_into","","",183,[[],["result",4]]],[11,"borrow","","",183,[[]]],[11,"borrow_mut","","",183,[[]]],[11,"type_id","","",183,[[],["typeid",3]]],[11,"peek","","",184,[[["cursor",3]]]],[11,"display","","",184,[[]]],[11,"from","","",184,[[]]],[11,"into","","",184,[[]]],[11,"to_owned","","",184,[[]]],[11,"clone_into","","",184,[[]]],[11,"try_from","","",184,[[],["result",4]]],[11,"try_into","","",184,[[],["result",4]]],[11,"borrow","","",184,[[]]],[11,"borrow_mut","","",184,[[]]],[11,"type_id","","",184,[[],["typeid",3]]],[11,"from","syn::buffer","",192,[[]]],[11,"into","","",192,[[]]],[11,"try_from","","",192,[[],["result",4]]],[11,"try_into","","",192,[[],["result",4]]],[11,"borrow","","",192,[[]]],[11,"borrow_mut","","",192,[[]]],[11,"type_id","","",192,[[],["typeid",3]]],[11,"from","","",193,[[]]],[11,"into","","",193,[[]]],[11,"to_owned","","",193,[[]]],[11,"clone_into","","",193,[[]]],[11,"try_from","","",193,[[],["result",4]]],[11,"try_into","","",193,[[],["result",4]]],[11,"borrow","","",193,[[]]],[11,"borrow_mut","","",193,[[]]],[11,"type_id","","",193,[[],["typeid",3]]],[11,"span","syn::punctuated","",196,[[],["span",3]]],[11,"from","","",196,[[]]],[11,"into","","",196,[[]]],[11,"into_iter","","",196,[[]]],[11,"to_owned","","",196,[[]]],[11,"clone_into","","",196,[[]]],[11,"try_from","","",196,[[],["result",4]]],[11,"try_into","","",196,[[],["result",4]]],[11,"borrow","","",196,[[]]],[11,"borrow_mut","","",196,[[]]],[11,"type_id","","",196,[[],["typeid",3]]],[11,"from","","",237,[[]]],[11,"into","","",237,[[]]],[11,"into_iter","","",237,[[]]],[11,"to_owned","","",237,[[]]],[11,"clone_into","","",237,[[]]],[11,"try_from","","",237,[[],["result",4]]],[11,"try_into","","",237,[[],["result",4]]],[11,"borrow","","",237,[[]]],[11,"borrow_mut","","",237,[[]]],[11,"type_id","","",237,[[],["typeid",3]]],[11,"from","","",238,[[]]],[11,"into","","",238,[[]]],[11,"into_iter","","",238,[[]]],[11,"try_from","","",238,[[],["result",4]]],[11,"try_into","","",238,[[],["result",4]]],[11,"borrow","","",238,[[]]],[11,"borrow_mut","","",238,[[]]],[11,"type_id","","",238,[[],["typeid",3]]],[11,"from","","",239,[[]]],[11,"into","","",239,[[]]],[11,"into_iter","","",239,[[]]],[11,"to_owned","","",239,[[]]],[11,"clone_into","","",239,[[]]],[11,"try_from","","",239,[[],["result",4]]],[11,"try_into","","",239,[[],["result",4]]],[11,"borrow","","",239,[[]]],[11,"borrow_mut","","",239,[[]]],[11,"type_id","","",239,[[],["typeid",3]]],[11,"from","","",240,[[]]],[11,"into","","",240,[[]]],[11,"into_iter","","",240,[[]]],[11,"to_owned","","",240,[[]]],[11,"clone_into","","",240,[[]]],[11,"try_from","","",240,[[],["result",4]]],[11,"try_into","","",240,[[],["result",4]]],[11,"borrow","","",240,[[]]],[11,"borrow_mut","","",240,[[]]],[11,"type_id","","",240,[[],["typeid",3]]],[11,"from","","",241,[[]]],[11,"into","","",241,[[]]],[11,"into_iter","","",241,[[]]],[11,"to_owned","","",241,[[]]],[11,"clone_into","","",241,[[]]],[11,"try_from","","",241,[[],["result",4]]],[11,"try_into","","",241,[[],["result",4]]],[11,"borrow","","",241,[[]]],[11,"borrow_mut","","",241,[[]]],[11,"type_id","","",241,[[],["typeid",3]]],[11,"from","","",242,[[]]],[11,"into","","",242,[[]]],[11,"into_iter","","",242,[[]]],[11,"try_from","","",242,[[],["result",4]]],[11,"try_into","","",242,[[],["result",4]]],[11,"borrow","","",242,[[]]],[11,"borrow_mut","","",242,[[]]],[11,"type_id","","",242,[[],["typeid",3]]],[11,"span","","",195,[[],["span",3]]],[11,"from","","",195,[[]]],[11,"into","","",195,[[]]],[11,"to_owned","","",195,[[]]],[11,"clone_into","","",195,[[]]],[11,"try_from","","",195,[[],["result",4]]],[11,"try_into","","",195,[[],["result",4]]],[11,"borrow","","",195,[[]]],[11,"borrow_mut","","",195,[[]]],[11,"type_id","","",195,[[],["typeid",3]]],[11,"from","syn::parse","",243,[[]]],[11,"into","","",243,[[]]],[11,"try_from","","",243,[[],["result",4]]],[11,"try_into","","",243,[[],["result",4]]],[11,"borrow","","",243,[[]]],[11,"borrow_mut","","",243,[[]]],[11,"type_id","","",243,[[],["typeid",3]]],[11,"from","","",202,[[]]],[11,"into","","",202,[[]]],[11,"to_string","","",202,[[],["string",3]]],[11,"try_from","","",202,[[],["result",4]]],[11,"try_into","","",202,[[],["result",4]]],[11,"borrow","","",202,[[]]],[11,"borrow_mut","","",202,[[]]],[11,"type_id","","",202,[[],["typeid",3]]],[11,"from","","",201,[[]]],[11,"into","","",201,[[]]],[11,"to_owned","","",201,[[]]],[11,"clone_into","","",201,[[]]],[11,"try_from","","",201,[[],["result",4]]],[11,"try_into","","",201,[[],["result",4]]],[11,"borrow","","",201,[[]]],[11,"borrow_mut","","",201,[[]]],[11,"type_id","","",201,[[],["typeid",3]]],[11,"from","","",244,[[]]],[11,"into","","",244,[[]]],[11,"try_from","","",244,[[],["result",4]]],[11,"try_into","","",244,[[],["result",4]]],[11,"borrow","","",244,[[]]],[11,"borrow_mut","","",244,[[]]],[11,"type_id","","",244,[[],["typeid",3]]],[11,"clone","syn","",204,[[],["ident",3]]],[11,"fmt","","",204,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",204,[[]]],[11,"eq","","",204,[[["ident",3]]]],[11,"eq","","",204,[[]]],[11,"partial_cmp","","",204,[[["ident",3]],[["option",4],["ordering",4]]]],[11,"cmp","","",204,[[["ident",3]],["ordering",4]]],[11,"fmt","","",204,[[["formatter",3]],[["result",4],["error",3]]]],[11,"to_tokens","","",204,[[["tokenstream",3]]]],[11,"span","","",204,[[],[["option",4],["span",3]]]],[11,"fmt","","",204,[[["formatter",3]],[["result",4],["error",3]]]],[11,"peek","","",30,[[["cursor",3]]]],[11,"display","","",30,[[]]],[11,"peek","","",72,[[["cursor",3]]]],[11,"display","","",72,[[]]],[11,"peek","","",186,[[["cursor",3]]]],[11,"display","","",186,[[]]],[11,"peek","","",187,[[["cursor",3]]]],[11,"display","","",187,[[]]],[11,"peek","","",188,[[["cursor",3]]]],[11,"display","","",188,[[]]],[11,"peek","","",189,[[["cursor",3]]]],[11,"display","","",189,[[]]],[11,"peek","","",190,[[["cursor",3]]]],[11,"display","","",190,[[]]],[11,"peek","","",191,[[["cursor",3]]]],[11,"display","","",191,[[]]],[11,"peek","","",31,[[["cursor",3]]]],[11,"display","","",31,[[]]],[11,"peek","syn::token","",82,[[["cursor",3]]]],[11,"display","","",82,[[]]],[11,"peek","","",183,[[["cursor",3]]]],[11,"display","","",183,[[]]],[11,"peek","","",181,[[["cursor",3]]]],[11,"display","","",181,[[]]],[11,"peek","","",182,[[["cursor",3]]]],[11,"display","","",182,[[]]],[11,"peek","","",184,[[["cursor",3]]]],[11,"display","","",184,[[]]],[11,"peek","","",83,[[["cursor",3]]]],[11,"display","","",83,[[]]],[11,"peek","","",84,[[["cursor",3]]]],[11,"display","","",84,[[]]],[11,"peek","","",85,[[["cursor",3]]]],[11,"display","","",85,[[]]],[11,"peek","","",86,[[["cursor",3]]]],[11,"display","","",86,[[]]],[11,"peek","","",87,[[["cursor",3]]]],[11,"display","","",87,[[]]],[11,"peek","","",88,[[["cursor",3]]]],[11,"display","","",88,[[]]],[11,"peek","","",89,[[["cursor",3]]]],[11,"display","","",89,[[]]],[11,"peek","","",90,[[["cursor",3]]]],[11,"display","","",90,[[]]],[11,"peek","","",91,[[["cursor",3]]]],[11,"display","","",91,[[]]],[11,"peek","","",92,[[["cursor",3]]]],[11,"display","","",92,[[]]],[11,"peek","","",93,[[["cursor",3]]]],[11,"display","","",93,[[]]],[11,"peek","","",94,[[["cursor",3]]]],[11,"display","","",94,[[]]],[11,"peek","","",95,[[["cursor",3]]]],[11,"display","","",95,[[]]],[11,"peek","","",96,[[["cursor",3]]]],[11,"display","","",96,[[]]],[11,"peek","","",97,[[["cursor",3]]]],[11,"display","","",97,[[]]],[11,"peek","","",98,[[["cursor",3]]]],[11,"display","","",98,[[]]],[11,"peek","","",99,[[["cursor",3]]]],[11,"display","","",99,[[]]],[11,"peek","","",100,[[["cursor",3]]]],[11,"display","","",100,[[]]],[11,"peek","","",101,[[["cursor",3]]]],[11,"display","","",101,[[]]],[11,"peek","","",102,[[["cursor",3]]]],[11,"display","","",102,[[]]],[11,"peek","","",103,[[["cursor",3]]]],[11,"display","","",103,[[]]],[11,"peek","","",104,[[["cursor",3]]]],[11,"display","","",104,[[]]],[11,"peek","","",105,[[["cursor",3]]]],[11,"display","","",105,[[]]],[11,"peek","","",106,[[["cursor",3]]]],[11,"display","","",106,[[]]],[11,"peek","","",107,[[["cursor",3]]]],[11,"display","","",107,[[]]],[11,"peek","","",108,[[["cursor",3]]]],[11,"display","","",108,[[]]],[11,"peek","","",109,[[["cursor",3]]]],[11,"display","","",109,[[]]],[11,"peek","","",110,[[["cursor",3]]]],[11,"display","","",110,[[]]],[11,"peek","","",111,[[["cursor",3]]]],[11,"display","","",111,[[]]],[11,"peek","","",112,[[["cursor",3]]]],[11,"display","","",112,[[]]],[11,"peek","","",113,[[["cursor",3]]]],[11,"display","","",113,[[]]],[11,"peek","","",114,[[["cursor",3]]]],[11,"display","","",114,[[]]],[11,"peek","","",115,[[["cursor",3]]]],[11,"display","","",115,[[]]],[11,"peek","","",116,[[["cursor",3]]]],[11,"display","","",116,[[]]],[11,"peek","","",117,[[["cursor",3]]]],[11,"display","","",117,[[]]],[11,"peek","","",118,[[["cursor",3]]]],[11,"display","","",118,[[]]],[11,"peek","","",119,[[["cursor",3]]]],[11,"display","","",119,[[]]],[11,"peek","","",120,[[["cursor",3]]]],[11,"display","","",120,[[]]],[11,"peek","","",121,[[["cursor",3]]]],[11,"display","","",121,[[]]],[11,"peek","","",122,[[["cursor",3]]]],[11,"display","","",122,[[]]],[11,"peek","","",123,[[["cursor",3]]]],[11,"display","","",123,[[]]],[11,"peek","","",124,[[["cursor",3]]]],[11,"display","","",124,[[]]],[11,"peek","","",125,[[["cursor",3]]]],[11,"display","","",125,[[]]],[11,"peek","","",126,[[["cursor",3]]]],[11,"display","","",126,[[]]],[11,"peek","","",127,[[["cursor",3]]]],[11,"display","","",127,[[]]],[11,"peek","","",128,[[["cursor",3]]]],[11,"display","","",128,[[]]],[11,"peek","","",129,[[["cursor",3]]]],[11,"display","","",129,[[]]],[11,"peek","","",130,[[["cursor",3]]]],[11,"display","","",130,[[]]],[11,"peek","","",131,[[["cursor",3]]]],[11,"display","","",131,[[]]],[11,"peek","","",132,[[["cursor",3]]]],[11,"display","","",132,[[]]],[11,"peek","","",133,[[["cursor",3]]]],[11,"display","","",133,[[]]],[11,"peek","","",134,[[["cursor",3]]]],[11,"display","","",134,[[]]],[11,"peek","","",135,[[["cursor",3]]]],[11,"display","","",135,[[]]],[11,"peek","","",136,[[["cursor",3]]]],[11,"display","","",136,[[]]],[11,"peek","","",137,[[["cursor",3]]]],[11,"display","","",137,[[]]],[11,"peek","","",138,[[["cursor",3]]]],[11,"display","","",138,[[]]],[11,"peek","","",139,[[["cursor",3]]]],[11,"display","","",139,[[]]],[11,"peek","","",140,[[["cursor",3]]]],[11,"display","","",140,[[]]],[11,"peek","","",141,[[["cursor",3]]]],[11,"display","","",141,[[]]],[11,"peek","","",142,[[["cursor",3]]]],[11,"display","","",142,[[]]],[11,"peek","","",143,[[["cursor",3]]]],[11,"display","","",143,[[]]],[11,"peek","","",144,[[["cursor",3]]]],[11,"display","","",144,[[]]],[11,"peek","","",145,[[["cursor",3]]]],[11,"display","","",145,[[]]],[11,"peek","","",146,[[["cursor",3]]]],[11,"display","","",146,[[]]],[11,"peek","","",147,[[["cursor",3]]]],[11,"display","","",147,[[]]],[11,"peek","","",148,[[["cursor",3]]]],[11,"display","","",148,[[]]],[11,"peek","","",149,[[["cursor",3]]]],[11,"display","","",149,[[]]],[11,"peek","","",150,[[["cursor",3]]]],[11,"display","","",150,[[]]],[11,"peek","","",151,[[["cursor",3]]]],[11,"display","","",151,[[]]],[11,"peek","","",152,[[["cursor",3]]]],[11,"display","","",152,[[]]],[11,"peek","","",153,[[["cursor",3]]]],[11,"display","","",153,[[]]],[11,"peek","","",154,[[["cursor",3]]]],[11,"display","","",154,[[]]],[11,"peek","","",155,[[["cursor",3]]]],[11,"display","","",155,[[]]],[11,"peek","","",156,[[["cursor",3]]]],[11,"display","","",156,[[]]],[11,"peek","","",157,[[["cursor",3]]]],[11,"display","","",157,[[]]],[11,"peek","","",158,[[["cursor",3]]]],[11,"display","","",158,[[]]],[11,"peek","","",159,[[["cursor",3]]]],[11,"display","","",159,[[]]],[11,"peek","","",160,[[["cursor",3]]]],[11,"display","","",160,[[]]],[11,"peek","","",161,[[["cursor",3]]]],[11,"display","","",161,[[]]],[11,"peek","","",162,[[["cursor",3]]]],[11,"display","","",162,[[]]],[11,"peek","","",163,[[["cursor",3]]]],[11,"display","","",163,[[]]],[11,"peek","","",164,[[["cursor",3]]]],[11,"display","","",164,[[]]],[11,"peek","","",165,[[["cursor",3]]]],[11,"display","","",165,[[]]],[11,"peek","","",166,[[["cursor",3]]]],[11,"display","","",166,[[]]],[11,"peek","","",167,[[["cursor",3]]]],[11,"display","","",167,[[]]],[11,"peek","","",168,[[["cursor",3]]]],[11,"display","","",168,[[]]],[11,"peek","","",169,[[["cursor",3]]]],[11,"display","","",169,[[]]],[11,"peek","","",170,[[["cursor",3]]]],[11,"display","","",170,[[]]],[11,"peek","","",171,[[["cursor",3]]]],[11,"display","","",171,[[]]],[11,"peek","","",172,[[["cursor",3]]]],[11,"display","","",172,[[]]],[11,"peek","","",173,[[["cursor",3]]]],[11,"display","","",173,[[]]],[11,"peek","","",174,[[["cursor",3]]]],[11,"display","","",174,[[]]],[11,"peek","","",175,[[["cursor",3]]]],[11,"display","","",175,[[]]],[11,"peek","","",176,[[["cursor",3]]]],[11,"display","","",176,[[]]],[11,"peek","","",177,[[["cursor",3]]]],[11,"display","","",177,[[]]],[11,"peek","","",178,[[["cursor",3]]]],[11,"display","","",178,[[]]],[11,"peek","","",179,[[["cursor",3]]]],[11,"display","","",179,[[]]],[11,"peek","","",180,[[["cursor",3]]]],[11,"display","","",180,[[]]],[11,"peek","syn","",204,[[["cursor",3]]]],[11,"display","","",204,[[]]],[11,"parse_any","","",204,[[["parsestream",6]],["result",6]]],[11,"unraw","","",204,[[],["ident",3]]],[11,"advance_to","syn::parse","",202,[[]]],[11,"parse","syn::token","",82,[[["parsestream",6]],["result",6]]],[11,"parse","","",83,[[["parsestream",6]],["result",6]]],[11,"parse","","",84,[[["parsestream",6]],["result",6]]],[11,"parse","","",85,[[["parsestream",6]],["result",6]]],[11,"parse","","",86,[[["parsestream",6]],["result",6]]],[11,"parse","","",87,[[["parsestream",6]],["result",6]]],[11,"parse","","",88,[[["parsestream",6]],["result",6]]],[11,"parse","","",89,[[["parsestream",6]],["result",6]]],[11,"parse","","",90,[[["parsestream",6]],["result",6]]],[11,"parse","","",91,[[["parsestream",6]],["result",6]]],[11,"parse","","",92,[[["parsestream",6]],["result",6]]],[11,"parse","","",93,[[["parsestream",6]],["result",6]]],[11,"parse","","",94,[[["parsestream",6]],["result",6]]],[11,"parse","","",95,[[["parsestream",6]],["result",6]]],[11,"parse","","",96,[[["parsestream",6]],["result",6]]],[11,"parse","","",97,[[["parsestream",6]],["result",6]]],[11,"parse","","",98,[[["parsestream",6]],["result",6]]],[11,"parse","","",99,[[["parsestream",6]],["result",6]]],[11,"parse","","",100,[[["parsestream",6]],["result",6]]],[11,"parse","","",101,[[["parsestream",6]],["result",6]]],[11,"parse","","",102,[[["parsestream",6]],["result",6]]],[11,"parse","","",103,[[["parsestream",6]],["result",6]]],[11,"parse","","",104,[[["parsestream",6]],["result",6]]],[11,"parse","","",105,[[["parsestream",6]],["result",6]]],[11,"parse","","",106,[[["parsestream",6]],["result",6]]],[11,"parse","","",107,[[["parsestream",6]],["result",6]]],[11,"parse","","",108,[[["parsestream",6]],["result",6]]],[11,"parse","","",109,[[["parsestream",6]],["result",6]]],[11,"parse","","",110,[[["parsestream",6]],["result",6]]],[11,"parse","","",111,[[["parsestream",6]],["result",6]]],[11,"parse","","",112,[[["parsestream",6]],["result",6]]],[11,"parse","","",113,[[["parsestream",6]],["result",6]]],[11,"parse","","",114,[[["parsestream",6]],["result",6]]],[11,"parse","","",115,[[["parsestream",6]],["result",6]]],[11,"parse","","",116,[[["parsestream",6]],["result",6]]],[11,"parse","","",117,[[["parsestream",6]],["result",6]]],[11,"parse","","",118,[[["parsestream",6]],["result",6]]],[11,"parse","","",119,[[["parsestream",6]],["result",6]]],[11,"parse","","",120,[[["parsestream",6]],["result",6]]],[11,"parse","","",121,[[["parsestream",6]],["result",6]]],[11,"parse","","",122,[[["parsestream",6]],["result",6]]],[11,"parse","","",123,[[["parsestream",6]],["result",6]]],[11,"parse","","",124,[[["parsestream",6]],["result",6]]],[11,"parse","","",125,[[["parsestream",6]],["result",6]]],[11,"parse","","",126,[[["parsestream",6]],["result",6]]],[11,"parse","","",127,[[["parsestream",6]],["result",6]]],[11,"parse","","",128,[[["parsestream",6]],["result",6]]],[11,"parse","","",129,[[["parsestream",6]],["result",6]]],[11,"parse","","",130,[[["parsestream",6]],["result",6]]],[11,"parse","","",131,[[["parsestream",6]],["result",6]]],[11,"parse","","",132,[[["parsestream",6]],["result",6]]],[11,"parse","","",133,[[["parsestream",6]],["result",6]]],[11,"parse","","",134,[[["parsestream",6]],["result",6]]],[11,"parse","","",135,[[["parsestream",6]],["result",6]]],[11,"parse","","",136,[[["parsestream",6]],["result",6]]],[11,"parse","","",137,[[["parsestream",6]],["result",6]]],[11,"parse","","",138,[[["parsestream",6]],["result",6]]],[11,"parse","","",139,[[["parsestream",6]],["result",6]]],[11,"parse","","",140,[[["parsestream",6]],["result",6]]],[11,"parse","","",141,[[["parsestream",6]],["result",6]]],[11,"parse","","",142,[[["parsestream",6]],["result",6]]],[11,"parse","","",143,[[["parsestream",6]],["result",6]]],[11,"parse","","",144,[[["parsestream",6]],["result",6]]],[11,"parse","","",145,[[["parsestream",6]],["result",6]]],[11,"parse","","",146,[[["parsestream",6]],["result",6]]],[11,"parse","","",147,[[["parsestream",6]],["result",6]]],[11,"parse","","",148,[[["parsestream",6]],["result",6]]],[11,"parse","","",149,[[["parsestream",6]],["result",6]]],[11,"parse","","",150,[[["parsestream",6]],["result",6]]],[11,"parse","","",151,[[["parsestream",6]],["result",6]]],[11,"parse","","",152,[[["parsestream",6]],["result",6]]],[11,"parse","","",153,[[["parsestream",6]],["result",6]]],[11,"parse","","",154,[[["parsestream",6]],["result",6]]],[11,"parse","","",155,[[["parsestream",6]],["result",6]]],[11,"parse","","",156,[[["parsestream",6]],["result",6]]],[11,"parse","","",157,[[["parsestream",6]],["result",6]]],[11,"parse","","",158,[[["parsestream",6]],["result",6]]],[11,"parse","","",159,[[["parsestream",6]],["result",6]]],[11,"parse","","",160,[[["parsestream",6]],["result",6]]],[11,"parse","","",161,[[["parsestream",6]],["result",6]]],[11,"parse","","",162,[[["parsestream",6]],["result",6]]],[11,"parse","","",163,[[["parsestream",6]],["result",6]]],[11,"parse","","",164,[[["parsestream",6]],["result",6]]],[11,"parse","","",165,[[["parsestream",6]],["result",6]]],[11,"parse","","",166,[[["parsestream",6]],["result",6]]],[11,"parse","","",167,[[["parsestream",6]],["result",6]]],[11,"parse","","",168,[[["parsestream",6]],["result",6]]],[11,"parse","","",169,[[["parsestream",6]],["result",6]]],[11,"parse","","",170,[[["parsestream",6]],["result",6]]],[11,"parse","","",171,[[["parsestream",6]],["result",6]]],[11,"parse","","",172,[[["parsestream",6]],["result",6]]],[11,"parse","","",173,[[["parsestream",6]],["result",6]]],[11,"parse","","",174,[[["parsestream",6]],["result",6]]],[11,"parse","","",175,[[["parsestream",6]],["result",6]]],[11,"parse","","",176,[[["parsestream",6]],["result",6]]],[11,"parse","","",177,[[["parsestream",6]],["result",6]]],[11,"parse","","",178,[[["parsestream",6]],["result",6]]],[11,"parse","","",179,[[["parsestream",6]],["result",6]]],[11,"parse","","",180,[[["parsestream",6]],["result",6]]],[11,"parse","syn","",204,[[["parsestream",6]],["result",6]]],[11,"parse","","",62,[[["parsestream",6]],["result",6]]],[11,"parse","","",1,[[["parsestream",6]],["result",6]]],[11,"parse","","",2,[[["parsestream",6]],["result",6]]],[11,"parse","","",63,[[["parsestream",6]],["result",6]]],[11,"parse","","",6,[[["parsestream",6]],["result",6]]],[11,"parse","","",4,[[["parsestream",6]],["result",6]]],[11,"parse","","",5,[[["parsestream",6]],["result",6]]],[11,"parse","","",65,[[["parsestream",6]],["result",6]]],[11,"parse","","",66,[[["parsestream",6]],["result",6]]],[11,"parse","","",15,[[["parsestream",6]],["result",6]]],[11,"parse","","",17,[[["parsestream",6]],["result",6]]],[11,"parse","","",67,[[["parsestream",6]],["result",6]]],[11,"parse","","",19,[[["parsestream",6]],["result",6]]],[11,"parse","","",22,[[["parsestream",6]],["result",6]]],[11,"parse","","",68,[[["parsestream",6]],["result",6]]],[11,"parse","","",23,[[["parsestream",6]],["result",6]]],[11,"parse","","",20,[[["parsestream",6]],["result",6]]],[11,"parse","","",28,[[["parsestream",6]],["result",6]]],[11,"parse","","",70,[[["parsestream",6]],["result",6]]],[11,"parse","","",27,[[["parsestream",6]],["result",6]]],[11,"parse","","",69,[[["parsestream",6]],["result",6]]],[11,"parse","","",21,[[["parsestream",6]],["result",6]]],[11,"parse","","",29,[[["parsestream",6]],["result",6]]],[11,"parse","","",71,[[["parsestream",6]],["result",6]]],[11,"parse","","",30,[[["parsestream",6]],["result",6]]],[11,"parse","","",72,[[["parsestream",6]],["result",6]]],[11,"parse","","",186,[[["parsestream",6]],["result",6]]],[11,"parse","","",187,[[["parsestream",6]],["result",6]]],[11,"parse","","",188,[[["parsestream",6]],["result",6]]],[11,"parse","","",189,[[["parsestream",6]],["result",6]]],[11,"parse","","",190,[[["parsestream",6]],["result",6]]],[11,"parse","","",191,[[["parsestream",6]],["result",6]]],[11,"parse","","",31,[[["parsestream",6]],["result",6]]],[11,"parse","","",32,[[["parsestream",6]],["result",6]]],[11,"parse","","",36,[[["parsestream",6]],["result",6]]],[11,"parse","","",76,[[["parsestream",6]],["result",6]]],[11,"parse","","",77,[[["parsestream",6]],["result",6]]],[11,"parse","","",79,[[["parsestream",6]],["result",6]]],[11,"parse","","",50,[[["parsestream",6]],["result",6]]],[11,"parse","","",39,[[["parsestream",6]],["result",6]]],[11,"parse","","",48,[[["parsestream",6]],["result",6]]],[11,"parse","","",49,[[["parsestream",6]],["result",6]]],[11,"parse","","",40,[[["parsestream",6]],["result",6]]],[11,"parse","","",45,[[["parsestream",6]],["result",6]]],[11,"parse","","",43,[[["parsestream",6]],["result",6]]],[11,"parse","","",52,[[["parsestream",6]],["result",6]]],[11,"parse","","",44,[[["parsestream",6]],["result",6]]],[11,"parse","","",47,[[["parsestream",6]],["result",6]]],[11,"parse","","",78,[[["parsestream",6]],["result",6]]],[11,"parse","","",51,[[["parsestream",6]],["result",6]]],[11,"parse","","",42,[[["parsestream",6]],["result",6]]],[11,"parse","","",41,[[["parsestream",6]],["result",6]]],[11,"parse","","",46,[[["parsestream",6]],["result",6]]],[11,"parse","","",38,[[["parsestream",6]],["result",6]]],[11,"parse","","",37,[[["parsestream",6]],["result",6]]],[11,"parse","","",58,[[["parsestream",6]],["result",6]]],[11,"parse","","",80,[[["parsestream",6]],["result",6]]],[11,"parse","","",54,[[["parsestream",6]],["result",6]]],[11,"parse","","",57,[[["parsestream",6]],["result",6]]],[11,"parse","","",59,[[["parsestream",6]],["result",6]]],[11,"parse","","",55,[[["parsestream",6]],["result",6]]],[11,"parse","syn::parse","",244,[[["parsestream",6]],["result",6]]],[11,"drop","","",202,[[]]],[11,"from","syn","",204,[[["selfvalue",3]],["ident",3]]],[11,"from","","",204,[[["selftype",3]],["ident",3]]],[11,"from","","",204,[[["super",3]],["ident",3]]],[11,"from","","",204,[[["crate",3]],["ident",3]]],[11,"from","","",204,[[["extern",3]],["ident",3]]],[11,"from","","",204,[[["underscore",3]],["ident",3]]],[11,"from","","",62,[[["path",3]],["meta",4]]],[11,"from","","",62,[[["metalist",3]],["meta",4]]],[11,"from","","",62,[[["metanamevalue",3]],["meta",4]]],[11,"from","","",63,[[["meta",4]],["nestedmeta",4]]],[11,"from","","",63,[[["lit",4]],["nestedmeta",4]]],[11,"from","","",64,[[["fieldsnamed",3]],["fields",4]]],[11,"from","","",64,[[["fieldsunnamed",3]],["fields",4]]],[11,"from","","",65,[[["vispublic",3]],["visibility",4]]],[11,"from","","",65,[[["viscrate",3]],["visibility",4]]],[11,"from","","",65,[[["visrestricted",3]],["visibility",4]]],[11,"from","","",66,[[["exprarray",3]],["expr",4]]],[11,"from","","",66,[[["exprassign",3]],["expr",4]]],[11,"from","","",66,[[["exprassignop",3]],["expr",4]]],[11,"from","","",66,[[["exprasync",3]],["expr",4]]],[11,"from","","",66,[[["exprawait",3]],["expr",4]]],[11,"from","","",66,[[["exprbinary",3]],["expr",4]]],[11,"from","","",66,[[["exprblock",3]],["expr",4]]],[11,"from","","",66,[[["exprbox",3]],["expr",4]]],[11,"from","","",66,[[["exprbreak",3]],["expr",4]]],[11,"from","","",66,[[["exprcall",3]],["expr",4]]],[11,"from","","",66,[[["exprcast",3]],["expr",4]]],[11,"from","","",66,[[["exprclosure",3]],["expr",4]]],[11,"from","","",66,[[["exprcontinue",3]],["expr",4]]],[11,"from","","",66,[[["exprfield",3]],["expr",4]]],[11,"from","","",66,[[["exprforloop",3]],["expr",4]]],[11,"from","","",66,[[["exprgroup",3]],["expr",4]]],[11,"from","","",66,[[["exprif",3]],["expr",4]]],[11,"from","","",66,[[["exprindex",3]],["expr",4]]],[11,"from","","",66,[[["exprlet",3]],["expr",4]]],[11,"from","","",66,[[["exprlit",3]],["expr",4]]],[11,"from","","",66,[[["exprloop",3]],["expr",4]]],[11,"from","","",66,[[["exprmacro",3]],["expr",4]]],[11,"from","","",66,[[["exprmatch",3]],["expr",4]]],[11,"from","","",66,[[["exprmethodcall",3]],["expr",4]]],[11,"from","","",66,[[["exprparen",3]],["expr",4]]],[11,"from","","",66,[[["exprpath",3]],["expr",4]]],[11,"from","","",66,[[["exprrange",3]],["expr",4]]],[11,"from","","",66,[[["exprreference",3]],["expr",4]]],[11,"from","","",66,[[["exprrepeat",3]],["expr",4]]],[11,"from","","",66,[[["exprreturn",3]],["expr",4]]],[11,"from","","",66,[[["exprstruct",3]],["expr",4]]],[11,"from","","",66,[[["exprtry",3]],["expr",4]]],[11,"from","","",66,[[["exprtryblock",3]],["expr",4]]],[11,"from","","",66,[[["exprtuple",3]],["expr",4]]],[11,"from","","",66,[[["exprtype",3]],["expr",4]]],[11,"from","","",66,[[["exprunary",3]],["expr",4]]],[11,"from","","",66,[[["exprunsafe",3]],["expr",4]]],[11,"from","","",66,[[["exprwhile",3]],["expr",4]]],[11,"from","","",66,[[["expryield",3]],["expr",4]]],[11,"from","","",19,[[],["index",3]]],[11,"from","","",68,[[["typeparam",3]],["genericparam",4]]],[11,"from","","",68,[[["lifetimedef",3]],["genericparam",4]]],[11,"from","","",68,[[["constparam",3]],["genericparam",4]]],[11,"from","","",28,[[["ident",3]]]],[11,"from","","",70,[[["traitbound",3]],["typeparambound",4]]],[11,"from","","",70,[[["lifetime",3]],["typeparambound",4]]],[11,"from","","",71,[[["predicatetype",3]],["wherepredicate",4]]],[11,"from","","",71,[[["predicatelifetime",3]],["wherepredicate",4]]],[11,"from","","",71,[[["predicateeq",3]],["wherepredicate",4]]],[11,"from","","",72,[[["litstr",3]],["lit",4]]],[11,"from","","",72,[[["litbytestr",3]],["lit",4]]],[11,"from","","",72,[[["litbyte",3]],["lit",4]]],[11,"from","","",72,[[["litchar",3]],["lit",4]]],[11,"from","","",72,[[["litint",3]],["lit",4]]],[11,"from","","",72,[[["litfloat",3]],["lit",4]]],[11,"from","","",72,[[["litbool",3]],["lit",4]]],[11,"from","","",190,[[["literal",3]]]],[11,"from","","",191,[[["literal",3]]]],[11,"from","","",75,[[["datastruct",3]],["data",4]]],[11,"from","","",75,[[["dataenum",3]],["data",4]]],[11,"from","","",75,[[["dataunion",3]],["data",4]]],[11,"from","","",79,[[["typearray",3]],["type",4]]],[11,"from","","",79,[[["typebarefn",3]],["type",4]]],[11,"from","","",79,[[["typegroup",3]],["type",4]]],[11,"from","","",79,[[["typeimpltrait",3]],["type",4]]],[11,"from","","",79,[[["typeinfer",3]],["type",4]]],[11,"from","","",79,[[["typemacro",3]],["type",4]]],[11,"from","","",79,[[["typenever",3]],["type",4]]],[11,"from","","",79,[[["typeparen",3]],["type",4]]],[11,"from","","",79,[[["typepath",3]],["type",4]]],[11,"from","","",79,[[["typeptr",3]],["type",4]]],[11,"from","","",79,[[["typereference",3]],["type",4]]],[11,"from","","",79,[[["typeslice",3]],["type",4]]],[11,"from","","",79,[[["typetraitobject",3]],["type",4]]],[11,"from","","",79,[[["typetuple",3]],["type",4]]],[11,"from","","",58,[[]]],[11,"from","","",59,[[]]],[11,"from","","",203,[[["lexerror",3]]]],[11,"next_back","syn::punctuated","",237,[[],["option",4]]],[11,"next_back","","",238,[[],["option",4]]],[11,"next_back","","",239,[[],["option",4]]],[11,"next_back","","",240,[[],["option",4]]],[11,"next_back","","",241,[[],["option",4]]],[11,"next_back","","",242,[[],["option",4]]],[11,"len","","",237,[[]]],[11,"len","","",238,[[]]],[11,"len","","",239,[[]]],[11,"len","","",240,[[]]],[11,"len","","",241,[[]]],[11,"len","","",242,[[]]],[11,"extend","","",196,[[["intoiterator",8]]]],[11,"extend","","",196,[[["intoiterator",8]]]],[11,"extend","syn","",203,[[["intoiterator",8]]]],[11,"into_iter","","",64,[[]]],[11,"into_iter","syn::punctuated","",196,[[]]],[11,"into_iter","syn","",203,[[]]],[11,"next","syn::punctuated","",237,[[],["option",4]]],[11,"size_hint","","",237,[[]]],[11,"next","","",238,[[],["option",4]]],[11,"size_hint","","",238,[[]]],[11,"next","","",239,[[],["option",4]]],[11,"size_hint","","",239,[[]]],[11,"next","","",240,[[],["option",4]]],[11,"size_hint","","",240,[[]]],[11,"next","","",241,[[],["option",4]]],[11,"size_hint","","",241,[[]]],[11,"next","","",242,[[],["option",4]]],[11,"size_hint","","",242,[[]]],[11,"clone","syn::token","",82,[[],["underscore",3]]],[11,"clone","","",83,[[],["abstract",3]]],[11,"clone","","",84,[[],["as",3]]],[11,"clone","","",85,[[],["async",3]]],[11,"clone","","",86,[[],["auto",3]]],[11,"clone","","",87,[[],["await",3]]],[11,"clone","","",88,[[],["become",3]]],[11,"clone","","",89,[[],["box",3]]],[11,"clone","","",90,[[],["break",3]]],[11,"clone","","",91,[[],["const",3]]],[11,"clone","","",92,[[],["continue",3]]],[11,"clone","","",93,[[],["crate",3]]],[11,"clone","","",94,[[],["default",3]]],[11,"clone","","",95,[[],["do",3]]],[11,"clone","","",96,[[],["dyn",3]]],[11,"clone","","",97,[[],["else",3]]],[11,"clone","","",98,[[],["enum",3]]],[11,"clone","","",99,[[],["extern",3]]],[11,"clone","","",100,[[],["final",3]]],[11,"clone","","",101,[[],["fn",3]]],[11,"clone","","",102,[[],["for",3]]],[11,"clone","","",103,[[],["if",3]]],[11,"clone","","",104,[[],["impl",3]]],[11,"clone","","",105,[[],["in",3]]],[11,"clone","","",106,[[],["let",3]]],[11,"clone","","",107,[[],["loop",3]]],[11,"clone","","",108,[[],["macro",3]]],[11,"clone","","",109,[[],["match",3]]],[11,"clone","","",110,[[],["mod",3]]],[11,"clone","","",111,[[],["move",3]]],[11,"clone","","",112,[[],["mut",3]]],[11,"clone","","",113,[[],["override",3]]],[11,"clone","","",114,[[],["priv",3]]],[11,"clone","","",115,[[],["pub",3]]],[11,"clone","","",116,[[],["ref",3]]],[11,"clone","","",117,[[],["return",3]]],[11,"clone","","",118,[[],["selftype",3]]],[11,"clone","","",119,[[],["selfvalue",3]]],[11,"clone","","",120,[[],["static",3]]],[11,"clone","","",121,[[],["struct",3]]],[11,"clone","","",122,[[],["super",3]]],[11,"clone","","",123,[[],["trait",3]]],[11,"clone","","",124,[[],["try",3]]],[11,"clone","","",125,[[],["type",3]]],[11,"clone","","",126,[[],["typeof",3]]],[11,"clone","","",127,[[],["union",3]]],[11,"clone","","",128,[[],["unsafe",3]]],[11,"clone","","",129,[[],["unsized",3]]],[11,"clone","","",130,[[],["use",3]]],[11,"clone","","",131,[[],["virtual",3]]],[11,"clone","","",132,[[],["where",3]]],[11,"clone","","",133,[[],["while",3]]],[11,"clone","","",134,[[],["yield",3]]],[11,"clone","","",135,[[],["add",3]]],[11,"clone","","",136,[[],["addeq",3]]],[11,"clone","","",137,[[],["and",3]]],[11,"clone","","",138,[[],["andand",3]]],[11,"clone","","",139,[[],["andeq",3]]],[11,"clone","","",140,[[],["at",3]]],[11,"clone","","",141,[[],["bang",3]]],[11,"clone","","",142,[[],["caret",3]]],[11,"clone","","",143,[[],["careteq",3]]],[11,"clone","","",144,[[],["colon",3]]],[11,"clone","","",145,[[],["colon2",3]]],[11,"clone","","",146,[[],["comma",3]]],[11,"clone","","",147,[[],["div",3]]],[11,"clone","","",148,[[],["diveq",3]]],[11,"clone","","",149,[[],["dollar",3]]],[11,"clone","","",150,[[],["dot",3]]],[11,"clone","","",151,[[],["dot2",3]]],[11,"clone","","",152,[[],["dot3",3]]],[11,"clone","","",153,[[],["dotdoteq",3]]],[11,"clone","","",154,[[],["eq",3]]],[11,"clone","","",155,[[],["eqeq",3]]],[11,"clone","","",156,[[],["ge",3]]],[11,"clone","","",157,[[],["gt",3]]],[11,"clone","","",158,[[],["le",3]]],[11,"clone","","",159,[[],["lt",3]]],[11,"clone","","",160,[[],["muleq",3]]],[11,"clone","","",161,[[],["ne",3]]],[11,"clone","","",162,[[],["or",3]]],[11,"clone","","",163,[[],["oreq",3]]],[11,"clone","","",164,[[],["oror",3]]],[11,"clone","","",165,[[],["pound",3]]],[11,"clone","","",166,[[],["question",3]]],[11,"clone","","",167,[[],["rarrow",3]]],[11,"clone","","",168,[[],["larrow",3]]],[11,"clone","","",169,[[],["rem",3]]],[11,"clone","","",170,[[],["remeq",3]]],[11,"clone","","",171,[[],["fatarrow",3]]],[11,"clone","","",172,[[],["semi",3]]],[11,"clone","","",173,[[],["shl",3]]],[11,"clone","","",174,[[],["shleq",3]]],[11,"clone","","",175,[[],["shr",3]]],[11,"clone","","",176,[[],["shreq",3]]],[11,"clone","","",177,[[],["star",3]]],[11,"clone","","",178,[[],["sub",3]]],[11,"clone","","",179,[[],["subeq",3]]],[11,"clone","","",180,[[],["tilde",3]]],[11,"clone","","",181,[[],["brace",3]]],[11,"clone","","",182,[[],["bracket",3]]],[11,"clone","","",183,[[],["paren",3]]],[11,"clone","","",184,[[],["group",3]]],[11,"clone","syn","",0,[[],["attribute",3]]],[11,"clone","","",61,[[],["attrstyle",4]]],[11,"clone","","",62,[[],["meta",4]]],[11,"clone","","",1,[[],["metalist",3]]],[11,"clone","","",2,[[],["metanamevalue",3]]],[11,"clone","","",63,[[],["nestedmeta",4]]],[11,"clone","","",6,[[],["variant",3]]],[11,"clone","","",64,[[],["fields",4]]],[11,"clone","","",4,[[],["fieldsnamed",3]]],[11,"clone","","",5,[[],["fieldsunnamed",3]]],[11,"clone","","",3,[[],["field",3]]],[11,"clone","","",65,[[],["visibility",4]]],[11,"clone","","",8,[[],["vispublic",3]]],[11,"clone","","",7,[[],["viscrate",3]]],[11,"clone","","",9,[[],["visrestricted",3]]],[11,"clone","","",66,[[],["expr",4]]],[11,"clone","","",205,[[],["exprarray",3]]],[11,"clone","","",206,[[],["exprassign",3]]],[11,"clone","","",207,[[],["exprassignop",3]]],[11,"clone","","",208,[[],["exprasync",3]]],[11,"clone","","",209,[[],["exprawait",3]]],[11,"clone","","",10,[[],["exprbinary",3]]],[11,"clone","","",210,[[],["exprblock",3]]],[11,"clone","","",211,[[],["exprbox",3]]],[11,"clone","","",212,[[],["exprbreak",3]]],[11,"clone","","",11,[[],["exprcall",3]]],[11,"clone","","",12,[[],["exprcast",3]]],[11,"clone","","",213,[[],["exprclosure",3]]],[11,"clone","","",214,[[],["exprcontinue",3]]],[11,"clone","","",13,[[],["exprfield",3]]],[11,"clone","","",215,[[],["exprforloop",3]]],[11,"clone","","",216,[[],["exprgroup",3]]],[11,"clone","","",217,[[],["exprif",3]]],[11,"clone","","",14,[[],["exprindex",3]]],[11,"clone","","",218,[[],["exprlet",3]]],[11,"clone","","",15,[[],["exprlit",3]]],[11,"clone","","",219,[[],["exprloop",3]]],[11,"clone","","",220,[[],["exprmacro",3]]],[11,"clone","","",221,[[],["exprmatch",3]]],[11,"clone","","",222,[[],["exprmethodcall",3]]],[11,"clone","","",16,[[],["exprparen",3]]],[11,"clone","","",17,[[],["exprpath",3]]],[11,"clone","","",223,[[],["exprrange",3]]],[11,"clone","","",224,[[],["exprreference",3]]],[11,"clone","","",225,[[],["exprrepeat",3]]],[11,"clone","","",226,[[],["exprreturn",3]]],[11,"clone","","",227,[[],["exprstruct",3]]],[11,"clone","","",228,[[],["exprtry",3]]],[11,"clone","","",229,[[],["exprtryblock",3]]],[11,"clone","","",230,[[],["exprtuple",3]]],[11,"clone","","",231,[[],["exprtype",3]]],[11,"clone","","",18,[[],["exprunary",3]]],[11,"clone","","",232,[[],["exprunsafe",3]]],[11,"clone","","",233,[[],["exprwhile",3]]],[11,"clone","","",234,[[],["expryield",3]]],[11,"clone","","",67,[[],["member",4]]],[11,"clone","","",19,[[],["index",3]]],[11,"clone","","",22,[[],["generics",3]]],[11,"clone","","",68,[[],["genericparam",4]]],[11,"clone","","",28,[[],["typeparam",3]]],[11,"clone","","",23,[[],["lifetimedef",3]]],[11,"clone","","",21,[[],["constparam",3]]],[11,"clone","","",235,[[],["implgenerics",3]]],[11,"clone","","",185,[[],["typegenerics",3]]],[11,"clone","","",236,[[],["turbofish",3]]],[11,"clone","","",20,[[],["boundlifetimes",3]]],[11,"clone","","",70,[[],["typeparambound",4]]],[11,"clone","","",27,[[],["traitbound",3]]],[11,"clone","","",69,[[],["traitboundmodifier",4]]],[11,"clone","","",29,[[],["whereclause",3]]],[11,"clone","","",71,[[],["wherepredicate",4]]],[11,"clone","","",26,[[],["predicatetype",3]]],[11,"clone","","",25,[[],["predicatelifetime",3]]],[11,"clone","","",24,[[],["predicateeq",3]]],[11,"clone","","",30,[[],["lifetime",3]]],[11,"clone","","",72,[[],["lit",4]]],[11,"clone","","",186,[[],["litstr",3]]],[11,"clone","","",187,[[],["litbytestr",3]]],[11,"clone","","",188,[[],["litbyte",3]]],[11,"clone","","",189,[[],["litchar",3]]],[11,"clone","","",190,[[],["litint",3]]],[11,"clone","","",191,[[],["litfloat",3]]],[11,"clone","","",31,[[],["litbool",3]]],[11,"clone","","",73,[[],["strstyle",4]]],[11,"clone","","",32,[[],["macro",3]]],[11,"clone","","",74,[[],["macrodelimiter",4]]],[11,"clone","","",36,[[],["deriveinput",3]]],[11,"clone","","",75,[[],["data",4]]],[11,"clone","","",34,[[],["datastruct",3]]],[11,"clone","","",33,[[],["dataenum",3]]],[11,"clone","","",35,[[],["dataunion",3]]],[11,"clone","","",76,[[],["binop",4]]],[11,"clone","","",77,[[],["unop",4]]],[11,"clone","","",79,[[],["type",4]]],[11,"clone","","",39,[[],["typearray",3]]],[11,"clone","","",40,[[],["typebarefn",3]]],[11,"clone","","",41,[[],["typegroup",3]]],[11,"clone","","",42,[[],["typeimpltrait",3]]],[11,"clone","","",43,[[],["typeinfer",3]]],[11,"clone","","",44,[[],["typemacro",3]]],[11,"clone","","",45,[[],["typenever",3]]],[11,"clone","","",46,[[],["typeparen",3]]],[11,"clone","","",47,[[],["typepath",3]]],[11,"clone","","",48,[[],["typeptr",3]]],[11,"clone","","",49,[[],["typereference",3]]],[11,"clone","","",50,[[],["typeslice",3]]],[11,"clone","","",51,[[],["typetraitobject",3]]],[11,"clone","","",52,[[],["typetuple",3]]],[11,"clone","","",37,[[],["abi",3]]],[11,"clone","","",38,[[],["barefnarg",3]]],[11,"clone","","",53,[[],["variadic",3]]],[11,"clone","","",78,[[],["returntype",4]]],[11,"clone","","",58,[[],["path",3]]],[11,"clone","","",59,[[],["pathsegment",3]]],[11,"clone","","",81,[[],["patharguments",4]]],[11,"clone","","",80,[[],["genericargument",4]]],[11,"clone","","",54,[[],["anglebracketedgenericarguments",3]]],[11,"clone","","",55,[[],["binding",3]]],[11,"clone","","",56,[[],["constraint",3]]],[11,"clone","","",57,[[],["parenthesizedgenericarguments",3]]],[11,"clone","","",60,[[],["qself",3]]],[11,"clone","syn::buffer","",193,[[],["cursor",3]]],[11,"clone","syn::punctuated","",196,[[],["punctuated",3]]],[11,"clone","","",237,[[]]],[11,"clone","","",239,[[],["intopairs",3]]],[11,"clone","","",240,[[],["intoiter",3]]],[11,"clone","","",241,[[]]],[11,"clone","","",195,[[],["pair",4]]],[11,"clone","syn::parse","",201,[[],["stepcursor",3]]],[11,"clone","syn","",203,[[],["error",3]]],[11,"default","syn::token","",82,[[]]],[11,"default","","",83,[[]]],[11,"default","","",84,[[]]],[11,"default","","",85,[[]]],[11,"default","","",86,[[]]],[11,"default","","",87,[[]]],[11,"default","","",88,[[]]],[11,"default","","",89,[[]]],[11,"default","","",90,[[]]],[11,"default","","",91,[[]]],[11,"default","","",92,[[]]],[11,"default","","",93,[[]]],[11,"default","","",94,[[]]],[11,"default","","",95,[[]]],[11,"default","","",96,[[]]],[11,"default","","",97,[[]]],[11,"default","","",98,[[]]],[11,"default","","",99,[[]]],[11,"default","","",100,[[]]],[11,"default","","",101,[[]]],[11,"default","","",102,[[]]],[11,"default","","",103,[[]]],[11,"default","","",104,[[]]],[11,"default","","",105,[[]]],[11,"default","","",106,[[]]],[11,"default","","",107,[[]]],[11,"default","","",108,[[]]],[11,"default","","",109,[[]]],[11,"default","","",110,[[]]],[11,"default","","",111,[[]]],[11,"default","","",112,[[]]],[11,"default","","",113,[[]]],[11,"default","","",114,[[]]],[11,"default","","",115,[[]]],[11,"default","","",116,[[]]],[11,"default","","",117,[[]]],[11,"default","","",118,[[]]],[11,"default","","",119,[[]]],[11,"default","","",120,[[]]],[11,"default","","",121,[[]]],[11,"default","","",122,[[]]],[11,"default","","",123,[[]]],[11,"default","","",124,[[]]],[11,"default","","",125,[[]]],[11,"default","","",126,[[]]],[11,"default","","",127,[[]]],[11,"default","","",128,[[]]],[11,"default","","",129,[[]]],[11,"default","","",130,[[]]],[11,"default","","",131,[[]]],[11,"default","","",132,[[]]],[11,"default","","",133,[[]]],[11,"default","","",134,[[]]],[11,"default","","",135,[[]]],[11,"default","","",136,[[]]],[11,"default","","",137,[[]]],[11,"default","","",138,[[]]],[11,"default","","",139,[[]]],[11,"default","","",140,[[]]],[11,"default","","",141,[[]]],[11,"default","","",142,[[]]],[11,"default","","",143,[[]]],[11,"default","","",144,[[]]],[11,"default","","",145,[[]]],[11,"default","","",146,[[]]],[11,"default","","",147,[[]]],[11,"default","","",148,[[]]],[11,"default","","",149,[[]]],[11,"default","","",150,[[]]],[11,"default","","",151,[[]]],[11,"default","","",152,[[]]],[11,"default","","",153,[[]]],[11,"default","","",154,[[]]],[11,"default","","",155,[[]]],[11,"default","","",156,[[]]],[11,"default","","",157,[[]]],[11,"default","","",158,[[]]],[11,"default","","",159,[[]]],[11,"default","","",160,[[]]],[11,"default","","",161,[[]]],[11,"default","","",162,[[]]],[11,"default","","",163,[[]]],[11,"default","","",164,[[]]],[11,"default","","",165,[[]]],[11,"default","","",166,[[]]],[11,"default","","",167,[[]]],[11,"default","","",168,[[]]],[11,"default","","",169,[[]]],[11,"default","","",170,[[]]],[11,"default","","",171,[[]]],[11,"default","","",172,[[]]],[11,"default","","",173,[[]]],[11,"default","","",174,[[]]],[11,"default","","",175,[[]]],[11,"default","","",176,[[]]],[11,"default","","",177,[[]]],[11,"default","","",178,[[]]],[11,"default","","",179,[[]]],[11,"default","","",180,[[]]],[11,"default","","",181,[[]]],[11,"default","","",182,[[]]],[11,"default","","",183,[[]]],[11,"default","","",184,[[]]],[11,"default","syn","",22,[[],["generics",3]]],[11,"default","","",20,[[],["boundlifetimes",3]]],[11,"default","","",81,[[]]],[11,"default","syn::punctuated","",196,[[]]],[11,"cmp","syn","",30,[[["lifetime",3]],["ordering",4]]],[11,"eq","","",67,[[["member",4]]]],[11,"ne","","",67,[[["member",4]]]],[11,"eq","","",19,[[]]],[11,"eq","","",30,[[["lifetime",3]]]],[11,"eq","syn::buffer","",193,[[["cursor",3]]]],[11,"ne","","",193,[[["cursor",3]]]],[11,"partial_cmp","syn","",30,[[["lifetime",3]],[["ordering",4],["option",4]]]],[11,"deref","syn::token","",82,[[]]],[11,"deref","","",135,[[]]],[11,"deref","","",137,[[]]],[11,"deref","","",140,[[]]],[11,"deref","","",141,[[]]],[11,"deref","","",142,[[]]],[11,"deref","","",144,[[]]],[11,"deref","","",146,[[]]],[11,"deref","","",147,[[]]],[11,"deref","","",149,[[]]],[11,"deref","","",150,[[]]],[11,"deref","","",154,[[]]],[11,"deref","","",157,[[]]],[11,"deref","","",159,[[]]],[11,"deref","","",162,[[]]],[11,"deref","","",165,[[]]],[11,"deref","","",166,[[]]],[11,"deref","","",169,[[]]],[11,"deref","","",172,[[]]],[11,"deref","","",177,[[]]],[11,"deref","","",178,[[]]],[11,"deref","","",180,[[]]],[11,"deref","syn::parse","",201,[[]]],[11,"deref_mut","syn::token","",82,[[]]],[11,"deref_mut","","",135,[[]]],[11,"deref_mut","","",137,[[]]],[11,"deref_mut","","",140,[[]]],[11,"deref_mut","","",141,[[]]],[11,"deref_mut","","",142,[[]]],[11,"deref_mut","","",144,[[]]],[11,"deref_mut","","",146,[[]]],[11,"deref_mut","","",147,[[]]],[11,"deref_mut","","",149,[[]]],[11,"deref_mut","","",150,[[]]],[11,"deref_mut","","",154,[[]]],[11,"deref_mut","","",157,[[]]],[11,"deref_mut","","",159,[[]]],[11,"deref_mut","","",162,[[]]],[11,"deref_mut","","",165,[[]]],[11,"deref_mut","","",166,[[]]],[11,"deref_mut","","",169,[[]]],[11,"deref_mut","","",172,[[]]],[11,"deref_mut","","",177,[[]]],[11,"deref_mut","","",178,[[]]],[11,"deref_mut","","",180,[[]]],[11,"fmt","syn::parse","",202,[[["formatter",3]],["result",6]]],[11,"fmt","syn","",203,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",190,[[["formatter",3]],["result",6]]],[11,"fmt","","",191,[[["formatter",3]],["result",6]]],[11,"fmt","syn::parse","",202,[[["formatter",3]],["result",6]]],[11,"fmt","syn","",203,[[["formatter",3]],["result",6]]],[11,"index","syn::punctuated","",196,[[]]],[11,"index_mut","","",196,[[]]],[11,"hash","syn","",67,[[]]],[11,"hash","","",19,[[]]],[11,"hash","","",30,[[]]],[11,"from_iter","syn::punctuated","",196,[[["intoiterator",8]]]],[11,"from_iter","","",196,[[["intoiterator",8]]]],[11,"description","syn","",203,[[]]],[11,"to_tokens","syn::token","",82,[[["tokenstream",3]]]],[11,"to_tokens","","",83,[[["tokenstream",3]]]],[11,"to_tokens","","",84,[[["tokenstream",3]]]],[11,"to_tokens","","",85,[[["tokenstream",3]]]],[11,"to_tokens","","",86,[[["tokenstream",3]]]],[11,"to_tokens","","",87,[[["tokenstream",3]]]],[11,"to_tokens","","",88,[[["tokenstream",3]]]],[11,"to_tokens","","",89,[[["tokenstream",3]]]],[11,"to_tokens","","",90,[[["tokenstream",3]]]],[11,"to_tokens","","",91,[[["tokenstream",3]]]],[11,"to_tokens","","",92,[[["tokenstream",3]]]],[11,"to_tokens","","",93,[[["tokenstream",3]]]],[11,"to_tokens","","",94,[[["tokenstream",3]]]],[11,"to_tokens","","",95,[[["tokenstream",3]]]],[11,"to_tokens","","",96,[[["tokenstream",3]]]],[11,"to_tokens","","",97,[[["tokenstream",3]]]],[11,"to_tokens","","",98,[[["tokenstream",3]]]],[11,"to_tokens","","",99,[[["tokenstream",3]]]],[11,"to_tokens","","",100,[[["tokenstream",3]]]],[11,"to_tokens","","",101,[[["tokenstream",3]]]],[11,"to_tokens","","",102,[[["tokenstream",3]]]],[11,"to_tokens","","",103,[[["tokenstream",3]]]],[11,"to_tokens","","",104,[[["tokenstream",3]]]],[11,"to_tokens","","",105,[[["tokenstream",3]]]],[11,"to_tokens","","",106,[[["tokenstream",3]]]],[11,"to_tokens","","",107,[[["tokenstream",3]]]],[11,"to_tokens","","",108,[[["tokenstream",3]]]],[11,"to_tokens","","",109,[[["tokenstream",3]]]],[11,"to_tokens","","",110,[[["tokenstream",3]]]],[11,"to_tokens","","",111,[[["tokenstream",3]]]],[11,"to_tokens","","",112,[[["tokenstream",3]]]],[11,"to_tokens","","",113,[[["tokenstream",3]]]],[11,"to_tokens","","",114,[[["tokenstream",3]]]],[11,"to_tokens","","",115,[[["tokenstream",3]]]],[11,"to_tokens","","",116,[[["tokenstream",3]]]],[11,"to_tokens","","",117,[[["tokenstream",3]]]],[11,"to_tokens","","",118,[[["tokenstream",3]]]],[11,"to_tokens","","",119,[[["tokenstream",3]]]],[11,"to_tokens","","",120,[[["tokenstream",3]]]],[11,"to_tokens","","",121,[[["tokenstream",3]]]],[11,"to_tokens","","",122,[[["tokenstream",3]]]],[11,"to_tokens","","",123,[[["tokenstream",3]]]],[11,"to_tokens","","",124,[[["tokenstream",3]]]],[11,"to_tokens","","",125,[[["tokenstream",3]]]],[11,"to_tokens","","",126,[[["tokenstream",3]]]],[11,"to_tokens","","",127,[[["tokenstream",3]]]],[11,"to_tokens","","",128,[[["tokenstream",3]]]],[11,"to_tokens","","",129,[[["tokenstream",3]]]],[11,"to_tokens","","",130,[[["tokenstream",3]]]],[11,"to_tokens","","",131,[[["tokenstream",3]]]],[11,"to_tokens","","",132,[[["tokenstream",3]]]],[11,"to_tokens","","",133,[[["tokenstream",3]]]],[11,"to_tokens","","",134,[[["tokenstream",3]]]],[11,"to_tokens","","",135,[[["tokenstream",3]]]],[11,"to_tokens","","",136,[[["tokenstream",3]]]],[11,"to_tokens","","",137,[[["tokenstream",3]]]],[11,"to_tokens","","",138,[[["tokenstream",3]]]],[11,"to_tokens","","",139,[[["tokenstream",3]]]],[11,"to_tokens","","",140,[[["tokenstream",3]]]],[11,"to_tokens","","",141,[[["tokenstream",3]]]],[11,"to_tokens","","",142,[[["tokenstream",3]]]],[11,"to_tokens","","",143,[[["tokenstream",3]]]],[11,"to_tokens","","",144,[[["tokenstream",3]]]],[11,"to_tokens","","",145,[[["tokenstream",3]]]],[11,"to_tokens","","",146,[[["tokenstream",3]]]],[11,"to_tokens","","",147,[[["tokenstream",3]]]],[11,"to_tokens","","",148,[[["tokenstream",3]]]],[11,"to_tokens","","",149,[[["tokenstream",3]]]],[11,"to_tokens","","",150,[[["tokenstream",3]]]],[11,"to_tokens","","",151,[[["tokenstream",3]]]],[11,"to_tokens","","",152,[[["tokenstream",3]]]],[11,"to_tokens","","",153,[[["tokenstream",3]]]],[11,"to_tokens","","",154,[[["tokenstream",3]]]],[11,"to_tokens","","",155,[[["tokenstream",3]]]],[11,"to_tokens","","",156,[[["tokenstream",3]]]],[11,"to_tokens","","",157,[[["tokenstream",3]]]],[11,"to_tokens","","",158,[[["tokenstream",3]]]],[11,"to_tokens","","",159,[[["tokenstream",3]]]],[11,"to_tokens","","",160,[[["tokenstream",3]]]],[11,"to_tokens","","",161,[[["tokenstream",3]]]],[11,"to_tokens","","",162,[[["tokenstream",3]]]],[11,"to_tokens","","",163,[[["tokenstream",3]]]],[11,"to_tokens","","",164,[[["tokenstream",3]]]],[11,"to_tokens","","",165,[[["tokenstream",3]]]],[11,"to_tokens","","",166,[[["tokenstream",3]]]],[11,"to_tokens","","",167,[[["tokenstream",3]]]],[11,"to_tokens","","",168,[[["tokenstream",3]]]],[11,"to_tokens","","",169,[[["tokenstream",3]]]],[11,"to_tokens","","",170,[[["tokenstream",3]]]],[11,"to_tokens","","",171,[[["tokenstream",3]]]],[11,"to_tokens","","",172,[[["tokenstream",3]]]],[11,"to_tokens","","",173,[[["tokenstream",3]]]],[11,"to_tokens","","",174,[[["tokenstream",3]]]],[11,"to_tokens","","",175,[[["tokenstream",3]]]],[11,"to_tokens","","",176,[[["tokenstream",3]]]],[11,"to_tokens","","",177,[[["tokenstream",3]]]],[11,"to_tokens","","",178,[[["tokenstream",3]]]],[11,"to_tokens","","",179,[[["tokenstream",3]]]],[11,"to_tokens","","",180,[[["tokenstream",3]]]],[11,"to_tokens","syn","",62,[[["tokenstream",3]]]],[11,"to_tokens","","",63,[[["tokenstream",3]]]],[11,"to_tokens","","",0,[[["tokenstream",3]]]],[11,"to_tokens","","",1,[[["tokenstream",3]]]],[11,"to_tokens","","",2,[[["tokenstream",3]]]],[11,"to_tokens","","",64,[[["tokenstream",3]]]],[11,"to_tokens","","",65,[[["tokenstream",3]]]],[11,"to_tokens","","",6,[[["tokenstream",3]]]],[11,"to_tokens","","",4,[[["tokenstream",3]]]],[11,"to_tokens","","",5,[[["tokenstream",3]]]],[11,"to_tokens","","",3,[[["tokenstream",3]]]],[11,"to_tokens","","",8,[[["tokenstream",3]]]],[11,"to_tokens","","",7,[[["tokenstream",3]]]],[11,"to_tokens","","",9,[[["tokenstream",3]]]],[11,"to_tokens","","",66,[[["tokenstream",3]]]],[11,"to_tokens","","",205,[[["tokenstream",3]]]],[11,"to_tokens","","",206,[[["tokenstream",3]]]],[11,"to_tokens","","",207,[[["tokenstream",3]]]],[11,"to_tokens","","",208,[[["tokenstream",3]]]],[11,"to_tokens","","",209,[[["tokenstream",3]]]],[11,"to_tokens","","",210,[[["tokenstream",3]]]],[11,"to_tokens","","",211,[[["tokenstream",3]]]],[11,"to_tokens","","",212,[[["tokenstream",3]]]],[11,"to_tokens","","",213,[[["tokenstream",3]]]],[11,"to_tokens","","",214,[[["tokenstream",3]]]],[11,"to_tokens","","",215,[[["tokenstream",3]]]],[11,"to_tokens","","",216,[[["tokenstream",3]]]],[11,"to_tokens","","",217,[[["tokenstream",3]]]],[11,"to_tokens","","",218,[[["tokenstream",3]]]],[11,"to_tokens","","",219,[[["tokenstream",3]]]],[11,"to_tokens","","",220,[[["tokenstream",3]]]],[11,"to_tokens","","",221,[[["tokenstream",3]]]],[11,"to_tokens","","",222,[[["tokenstream",3]]]],[11,"to_tokens","","",223,[[["tokenstream",3]]]],[11,"to_tokens","","",224,[[["tokenstream",3]]]],[11,"to_tokens","","",225,[[["tokenstream",3]]]],[11,"to_tokens","","",226,[[["tokenstream",3]]]],[11,"to_tokens","","",227,[[["tokenstream",3]]]],[11,"to_tokens","","",228,[[["tokenstream",3]]]],[11,"to_tokens","","",229,[[["tokenstream",3]]]],[11,"to_tokens","","",230,[[["tokenstream",3]]]],[11,"to_tokens","","",231,[[["tokenstream",3]]]],[11,"to_tokens","","",232,[[["tokenstream",3]]]],[11,"to_tokens","","",233,[[["tokenstream",3]]]],[11,"to_tokens","","",234,[[["tokenstream",3]]]],[11,"to_tokens","","",11,[[["tokenstream",3]]]],[11,"to_tokens","","",10,[[["tokenstream",3]]]],[11,"to_tokens","","",18,[[["tokenstream",3]]]],[11,"to_tokens","","",15,[[["tokenstream",3]]]],[11,"to_tokens","","",12,[[["tokenstream",3]]]],[11,"to_tokens","","",13,[[["tokenstream",3]]]],[11,"to_tokens","","",67,[[["tokenstream",3]]]],[11,"to_tokens","","",19,[[["tokenstream",3]]]],[11,"to_tokens","","",14,[[["tokenstream",3]]]],[11,"to_tokens","","",17,[[["tokenstream",3]]]],[11,"to_tokens","","",16,[[["tokenstream",3]]]],[11,"to_tokens","","",68,[[["tokenstream",3]]]],[11,"to_tokens","","",70,[[["tokenstream",3]]]],[11,"to_tokens","","",71,[[["tokenstream",3]]]],[11,"to_tokens","","",22,[[["tokenstream",3]]]],[11,"to_tokens","","",235,[[["tokenstream",3]]]],[11,"to_tokens","","",185,[[["tokenstream",3]]]],[11,"to_tokens","","",236,[[["tokenstream",3]]]],[11,"to_tokens","","",20,[[["tokenstream",3]]]],[11,"to_tokens","","",23,[[["tokenstream",3]]]],[11,"to_tokens","","",28,[[["tokenstream",3]]]],[11,"to_tokens","","",27,[[["tokenstream",3]]]],[11,"to_tokens","","",69,[[["tokenstream",3]]]],[11,"to_tokens","","",21,[[["tokenstream",3]]]],[11,"to_tokens","","",29,[[["tokenstream",3]]]],[11,"to_tokens","","",26,[[["tokenstream",3]]]],[11,"to_tokens","","",25,[[["tokenstream",3]]]],[11,"to_tokens","","",24,[[["tokenstream",3]]]],[11,"to_tokens","","",30,[[["tokenstream",3]]]],[11,"to_tokens","","",72,[[["tokenstream",3]]]],[11,"to_tokens","","",186,[[["tokenstream",3]]]],[11,"to_tokens","","",187,[[["tokenstream",3]]]],[11,"to_tokens","","",188,[[["tokenstream",3]]]],[11,"to_tokens","","",189,[[["tokenstream",3]]]],[11,"to_tokens","","",190,[[["tokenstream",3]]]],[11,"to_tokens","","",191,[[["tokenstream",3]]]],[11,"to_tokens","","",31,[[["tokenstream",3]]]],[11,"to_tokens","","",32,[[["tokenstream",3]]]],[11,"to_tokens","","",36,[[["tokenstream",3]]]],[11,"to_tokens","","",76,[[["tokenstream",3]]]],[11,"to_tokens","","",77,[[["tokenstream",3]]]],[11,"to_tokens","","",79,[[["tokenstream",3]]]],[11,"to_tokens","","",50,[[["tokenstream",3]]]],[11,"to_tokens","","",39,[[["tokenstream",3]]]],[11,"to_tokens","","",48,[[["tokenstream",3]]]],[11,"to_tokens","","",49,[[["tokenstream",3]]]],[11,"to_tokens","","",40,[[["tokenstream",3]]]],[11,"to_tokens","","",45,[[["tokenstream",3]]]],[11,"to_tokens","","",52,[[["tokenstream",3]]]],[11,"to_tokens","","",47,[[["tokenstream",3]]]],[11,"to_tokens","","",51,[[["tokenstream",3]]]],[11,"to_tokens","","",42,[[["tokenstream",3]]]],[11,"to_tokens","","",41,[[["tokenstream",3]]]],[11,"to_tokens","","",46,[[["tokenstream",3]]]],[11,"to_tokens","","",43,[[["tokenstream",3]]]],[11,"to_tokens","","",44,[[["tokenstream",3]]]],[11,"to_tokens","","",78,[[["tokenstream",3]]]],[11,"to_tokens","","",38,[[["tokenstream",3]]]],[11,"to_tokens","","",53,[[["tokenstream",3]]]],[11,"to_tokens","","",37,[[["tokenstream",3]]]],[11,"to_tokens","","",58,[[["tokenstream",3]]]],[11,"to_tokens","","",59,[[["tokenstream",3]]]],[11,"to_tokens","","",81,[[["tokenstream",3]]]],[11,"to_tokens","","",80,[[["tokenstream",3]]]],[11,"to_tokens","","",54,[[["tokenstream",3]]]],[11,"to_tokens","","",55,[[["tokenstream",3]]]],[11,"to_tokens","","",56,[[["tokenstream",3]]]],[11,"to_tokens","","",57,[[["tokenstream",3]]]],[11,"to_tokens","syn::punctuated","",196,[[["tokenstream",3]]]],[11,"to_tokens","","",195,[[["tokenstream",3]]]],[11,"fmt","syn","",67,[[["formatter",3]],["result",6]]],[11,"span","","",67,[[],[["span",3],["option",4]]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"span","","",19,[[],[["span",3],["option",4]]]],[11,"new","","Creates a new `Ident` with the given `string` as well as…",204,[[["span",3]],["ident",3]]],[11,"span","","Returns the span of this `Ident`.",204,[[],["span",3]]],[11,"set_span","","Configures the span of this `Ident`, possibly changing its…",204,[[["span",3]]]],[11,"peek","syn::parse","Looks at the next token in the parse stream to determine…",243,[[["peek",8]]]],[11,"error","","Triggers an error at the current position of the parse…",243,[[],["error",3]]]],"p":[[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"Field"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Variant"],[3,"VisCrate"],[3,"VisPublic"],[3,"VisRestricted"],[3,"ExprBinary"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprLit"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprUnary"],[3,"Index"],[3,"BoundLifetimes"],[3,"ConstParam"],[3,"Generics"],[3,"LifetimeDef"],[3,"PredicateEq"],[3,"PredicateLifetime"],[3,"PredicateType"],[3,"TraitBound"],[3,"TypeParam"],[3,"WhereClause"],[3,"Lifetime"],[3,"LitBool"],[3,"Macro"],[3,"DataEnum"],[3,"DataStruct"],[3,"DataUnion"],[3,"DeriveInput"],[3,"Abi"],[3,"BareFnArg"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Variadic"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"Path"],[3,"PathSegment"],[3,"QSelf"],[4,"AttrStyle"],[4,"Meta"],[4,"NestedMeta"],[4,"Fields"],[4,"Visibility"],[4,"Expr"],[4,"Member"],[4,"GenericParam"],[4,"TraitBoundModifier"],[4,"TypeParamBound"],[4,"WherePredicate"],[4,"Lit"],[4,"StrStyle"],[4,"MacroDelimiter"],[4,"Data"],[4,"BinOp"],[4,"UnOp"],[4,"ReturnType"],[4,"Type"],[4,"GenericArgument"],[4,"PathArguments"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[3,"TypeGenerics"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[4,"Pair"],[3,"Punctuated"],[8,"Spanned"],[8,"Speculative"],[8,"Parse"],[8,"Parser"],[3,"StepCursor"],[3,"ParseBuffer"],[3,"Error"],[3,"Ident"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprLet"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"Pairs"],[3,"PairsMut"],[3,"IntoPairs"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Lookahead1"],[3,"Nothing"]]},\
"unicode_xid":{"doc":"Determine if a `char` is a valid identifier for a parser…","i":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is…",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid…",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the…",0,[[]]],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the…",0,[[]]]],"p":[[8,"UnicodeXID"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);